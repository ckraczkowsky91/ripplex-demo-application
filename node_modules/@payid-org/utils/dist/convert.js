"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertUrlToPayId = exports.convertPayIdToUrl = void 0;
const helpers_1 = require("./helpers");
const parse_1 = require("./parse");
/**
 * Convert a PayID string to a PayIdUrl.
 *
 * @param potentialPayId - A string that might be a valid PayID.
 *
 * @returns A URL object typed as a PayIdUrl.
 *
 * @throws An error if the PayID given as an input  is invalid.
 */
function convertPayIdToUrl(potentialPayId) {
    const payId = parse_1.parsePayId(potentialPayId);
    const [user, host] = helpers_1.splitPayIdString(payId);
    // TODO:(hbergren) If PayID Discovery becomes real,
    // this might need to make a fetch() request to determine how to build the PayID URL.
    return parse_1.parsePayIdUrl(`https://${host}/${user}`);
}
exports.convertPayIdToUrl = convertPayIdToUrl;
/**
 * Convert a PayID URL as a string or URL object to a PayID string representation.
 *
 * @param potentialPayIdUrl - A string or URL that might be a valid PayID URL.
 *
 * @returns A valid PayID string typed as a PayId.
 *
 * @throws An error if the PayID URL given as an input is invalid.
 */
function convertUrlToPayId(potentialPayIdUrl) {
    const payIdUrl = parse_1.parsePayIdUrl(potentialPayIdUrl);
    // Remove the leading '/' from the path.
    //
    // TODO:(hbergren) If PayID Discovery becomes real,
    // this might need to make a fetch() request to determine how to parse the PayID URL.
    const user = payIdUrl.pathname.slice(1);
    const payId = `${user}$${payIdUrl.hostname}`;
    return parse_1.parsePayId(payId);
}
exports.convertUrlToPayId = convertUrlToPayId;
//# sourceMappingURL=convert.js.map