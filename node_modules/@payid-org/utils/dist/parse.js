"use strict";
/* eslint-disable @typescript-eslint/consistent-type-assertions --
 * We use type assertions in these functions
 * to illustrate that things have been successfully parsed.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePayIdUrl = exports.parsePayId = void 0;
const helpers_1 = require("./helpers");
/**
 * Parse an unknown value to a PayID.
 *
 * @param input - An input which may or may not be a valid PayID.
 *
 * @returns A valid PayID string typed as a PayId.
 *
 * @throws An error if the input is an invalid PayID.
 */
function parsePayId(input) {
    if (typeof input !== 'string') {
        throw new Error('PayIDs must be a string.');
    }
    const [user, host] = helpers_1.splitPayIdString(input);
    if (user.includes('/') || host.includes('/')) {
        throw new Error('A PayID string representation cannot include paths.');
    }
    // Throws an error if this would be an invalid PayID URL
    parsePayIdUrl(`https://${host}/${user}`);
    // PayIDs are canonically all lowercase
    return input.toLowerCase();
}
exports.parsePayId = parsePayId;
/**
 * Parse the URL to see if it can be converted to a PayID.
 *
 * @param input - The URL string to be converted to a PayID URL.
 *
 * @returns A URL object.
 *
 * @throws A custom ParseError when the PayID URL is invalid.
 */
function parsePayIdUrl(input) {
    if (typeof input !== 'string' && !(input instanceof URL)) {
        throw new Error('PayID URLs must be either URL strings or URL objects.');
    }
    const url = input instanceof URL ? input : new URL(input);
    // Make sure the protocol isn't something wild like an FTP request
    if (url.protocol !== 'http:' && url.protocol !== 'https:') {
        throw new Error(`Invalid URL protocol: "${url.protocol}". PayID URLs must be HTTP/HTTPS.`);
    }
    // Disallow namespace paths
    if (!url.hostname.includes('.')) {
        throw new Error(`Hostname "${url.hostname}" is not a valid hostname. Needs a dot-separated TLD.`);
    }
    return url;
}
exports.parsePayIdUrl = parsePayIdUrl;
//# sourceMappingURL=parse.js.map