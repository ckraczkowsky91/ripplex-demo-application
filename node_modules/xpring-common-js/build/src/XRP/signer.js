"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rippleCodec = __importStar(require("ripple-binary-codec"));
const utils_1 = __importDefault(require("../Common/utils"));
const serializer_1 = __importDefault(require("./serializer"));
/**
 * Abstracts the details of signing.
 */
const signer = {
    /**
     * Encode the given raw JSON transaction to hex and sign it.
     *
     * @param transactionJSON - The raw transaction JSON object.
     * @param wallet - The wallet to sign the transaction with.
     *
     * @returns A set of bytes representing the inputs and a signature.
     *
     * @throws An error if we are unable to sign the transaction.
     */
    signTransactionFromJSON(transactionJSON, wallet) {
        const transactionHex = rippleCodec.encodeForSigning(transactionJSON);
        const signatureHex = wallet.sign(transactionHex);
        if (!signatureHex) {
            throw new Error('Unable to produce a signature.');
        }
        const signedTransactionJSON = Object.assign(Object.assign({}, transactionJSON), { TxnSignature: signatureHex });
        const signedTransactionHex = rippleCodec.encode(signedTransactionJSON);
        return utils_1.default.toBytes(signedTransactionHex);
    },
    /**
     * Encode the given object to hex and sign it.
     *
     * @param transaction - The transaction to sign.
     * @param wallet - The wallet to sign the transaction with.
     * @returns A set of bytes representing the inputs and a signature.
     */
    signTransaction(transaction, wallet) {
        const transactionJSON = serializer_1.default.transactionToJSON(transaction);
        if (transactionJSON === undefined) {
            return undefined;
        }
        return this.signTransactionFromJSON(transactionJSON, wallet);
    },
};
exports.default = signer;
//# sourceMappingURL=signer.js.map