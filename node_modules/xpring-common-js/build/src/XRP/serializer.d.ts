import { AccountAddress } from './generated/org/xrpl/rpc/v1/account_pb';
import { XRPDropsAmount, Currency, IssuedCurrencyAmount, CurrencyAmount } from './generated/org/xrpl/rpc/v1/amount_pb';
import { Authorize, CheckID, ClearFlag, DestinationTag, Domain, EmailHash, InvoiceID, LastLedgerSequence, MessageKey, SetFlag, Sequence, TransferRate, TickSize, Amount, MemoData, MemoFormat, MemoType, Unauthorize, Destination, DeliverMin, SendMax, TransactionSignature, SigningPublicKey, Expiration, Account, TakerGets, TakerPays, OfferSequence, Owner, Condition, CancelAfter, FinishAfter, Channel, SignerQuorum, RegularKey, SettleDelay, PaymentChannelSignature, PublicKey, Balance, Fulfillment, SignerWeight, QualityIn, QualityOut, LimitAmount, SignerEntry } from './generated/org/xrpl/rpc/v1/common_pb';
import { AccountSet, Memo, Payment, Transaction, DepositPreauth, AccountDelete, OfferCancel, CheckCancel, CheckCash, CheckCreate, OfferCreate, EscrowCancel, EscrowCreate, EscrowFinish, SignerListSet, PaymentChannelClaim, PaymentChannelCreate, PaymentChannelFund, SetRegularKey, TrustSet } from './generated/org/xrpl/rpc/v1/transaction_pb';
/**
 * Common fields on a transaction.
 */
interface BaseTransactionJSON {
    Account: string;
    Fee: XRPDropsAmountJSON;
    LastLedgerSequence: LastLedgerSequenceJSON;
    Sequence: number;
    SigningPubKey: string;
    TxnSignature?: string;
    Memos?: MemoJSON[];
    Flags?: FlagsJSON;
}
/**
 * Transaction Specific Fields.
 */
export interface AccountSetJSON {
    ClearFlag?: ClearFlagJSON;
    Domain?: DomainJSON;
    EmailHash?: EmailHashJSON;
    MessageKey?: MessageKeyJSON;
    SetFlag?: SetFlagJSON;
    TransferRate?: TransferRateJSON;
    TickSize?: TickSizeJSON;
    TransactionType: 'AccountSet';
}
export interface CheckCashJSON {
    CheckID: CheckIDJSON;
    Amount?: CurrencyAmountJSON;
    DeliverMin?: DeliverMinJSON;
    TransactionType: 'CheckCash';
}
export interface CheckCreateJSON {
    Destination: DestinationJSON;
    SendMax: SendMaxJSON;
    DestinationTag?: DestinationTagJSON;
    Expiration?: ExpirationJSON;
    InvoiceID?: InvoiceIdJSON;
    TransactionType: 'CheckCreate';
}
export interface DepositPreauthJSON {
    Authorize?: AuthorizeJSON;
    Unauthorize?: UnauthorizeJSON;
    TransactionType: 'DepositPreauth';
}
export interface EscrowCancelJSON {
    OfferSequence: OfferSequenceJSON;
    Owner: OwnerJSON;
    TransactionType: 'EscrowCancel';
}
export interface EscrowCreateJSON {
    Amount: AmountJSON;
    CancelAfter?: CancelAfterJSON;
    Condition?: ConditionJSON;
    Destination: DestinationJSON;
    DestinationTag?: DestinationTagJSON;
    FinishAfter?: FinishAfterJSON;
    TransactionType: 'EscrowCreate';
}
export interface EscrowFinishJSON {
    Condition?: ConditionJSON;
    Fulfillment?: FulfillmentJSON;
    OfferSequence: OfferSequenceJSON;
    Owner: OwnerJSON;
    TransactionType: 'EscrowFinish';
}
export interface OfferCancelJSON {
    OfferSequence: OfferSequenceJSON;
    TransactionType: 'OfferCancel';
}
export interface PaymentJSON {
    Amount: AmountJSON;
    DeliverMin?: DeliverMinJSON;
    Destination: DestinationJSON;
    DestinationTag?: DestinationTagJSON;
    InvoiceID?: InvoiceIdJSON;
    Paths?: PathJSON[];
    SendMax?: SendMaxJSON;
    TransactionType: 'Payment';
}
export interface AccountDeleteJSON {
    Destination: DestinationJSON;
    DestinationTag?: DestinationTagJSON;
    TransactionType: 'AccountDelete';
}
export interface CheckCancelJSON {
    CheckID: CheckIDJSON;
    TransactionType: 'CheckCancel';
}
export interface PaymentChannelClaimJSON {
    Amount?: AmountJSON;
    Balance?: BalanceJSON;
    Channel: ChannelJSON;
    PublicKey?: PublicKeyJSON;
    Signature?: PaymentChannelSignatureJSON;
    TransactionType: 'PaymentChannelClaim';
}
export interface PaymentChannelCreateJSON {
    Amount: AmountJSON;
    Destination: DestinationJSON;
    SettleDelay: SettleDelayJSON;
    PublicKey: PublicKeyJSON;
    CancelAfter?: CancelAfterJSON;
    DestinationTag?: DestinationTagJSON;
    TransactionType: 'PaymentChannelCreate';
}
export interface PaymentChannelFundJSON {
    Channel: ChannelJSON;
    Amount: AmountJSON;
    Expiration?: ExpirationJSON;
    TransactionType: 'PaymentChannelFund';
}
export interface OfferCreateJSON {
    Expiration?: ExpirationJSON;
    OfferSequence?: OfferSequenceJSON;
    TakerGets: TakerGetsJSON;
    TakerPays: TakerPaysJSON;
    TransactionType: 'OfferCreate';
}
export interface SignerListSetJSON {
    SignerQuorum: SignerQuorumJSON;
    SignerEntries: SignerEntryJSON[];
    TransactionType: 'SignerListSet';
}
export interface SetRegularKeyJSON {
    RegularKey?: RegularKeyJSON;
    TransactionType: 'SetRegularKey';
}
export interface TrustSetJSON {
    LimitAmount: LimitAmountJSON;
    QualityIn?: QualityInJSON;
    QualityOut?: QualityOutJSON;
    TransactionType: 'TrustSet';
}
/**
 * Individual Transaction Types.
 */
declare type AccountDeleteTransactionJSON = BaseTransactionJSON & AccountDeleteJSON;
declare type AccountSetTransactionJSON = BaseTransactionJSON & AccountSetJSON;
declare type CheckCancelTransactionJSON = BaseTransactionJSON & CheckCancelJSON;
declare type CheckCashTransactionJSON = BaseTransactionJSON & CheckCashJSON;
declare type CheckCreateTransactionJSON = BaseTransactionJSON & CheckCreateJSON;
declare type DepositPreauthTransactionJSON = BaseTransactionJSON & DepositPreauthJSON;
declare type OfferCancelTransactionJSON = BaseTransactionJSON & OfferCancelJSON;
declare type OfferCreateTransactionJSON = BaseTransactionJSON & OfferCreateJSON;
declare type EscrowCancelTransactionJSON = BaseTransactionJSON & EscrowCancelJSON;
declare type EscrowCreateTransactionJSON = BaseTransactionJSON & EscrowCreateJSON;
declare type EscrowFinishTransactionJSON = BaseTransactionJSON & EscrowFinishJSON;
declare type PaymentTransactionJSON = BaseTransactionJSON & PaymentJSON;
declare type SignerListSetTransactionJSON = BaseTransactionJSON & SignerListSetJSON;
declare type PaymentChannelClaimTransactionJSON = BaseTransactionJSON & PaymentChannelClaimJSON;
declare type PaymentChannelCreateTransactionJSON = BaseTransactionJSON & PaymentChannelCreateJSON;
declare type PaymentChannelFundTransactionJSON = BaseTransactionJSON & PaymentChannelFundJSON;
declare type SetRegularKeyTransactionJSON = BaseTransactionJSON & SetRegularKeyJSON;
declare type TrustSetTransactionJSON = BaseTransactionJSON & TrustSetJSON;
/**
 * All Transactions.
 */
export declare type TransactionJSON = AccountDeleteTransactionJSON | AccountSetTransactionJSON | CheckCancelTransactionJSON | CheckCashTransactionJSON | CheckCreateTransactionJSON | DepositPreauthTransactionJSON | EscrowCancelTransactionJSON | EscrowCreateTransactionJSON | EscrowFinishTransactionJSON | OfferCancelTransactionJSON | OfferCreateTransactionJSON | PaymentTransactionJSON | SignerListSetTransactionJSON | PaymentChannelCreateTransactionJSON | PaymentChannelClaimTransactionJSON | PaymentChannelFundTransactionJSON | SetRegularKeyTransactionJSON | TrustSetTransactionJSON;
/**
 * Types for serialized sub-objects.
 */
interface SignerEntryJSON {
    Account: AccountJSON;
    SignerWeight: SignerWeightJSON;
}
interface MemoJSON {
    Memo?: MemoDetailsJSON;
}
interface MemoDetailsJSON {
    MemoData?: MemoDataJSON;
    MemoType?: MemoDataJSON;
    MemoFormat?: MemoDataJSON;
}
interface PathElementJSON {
    account?: string;
    issuer?: string;
    currency?: CurrencyJSON;
}
interface IssuedCurrencyAmountJSON {
    value: string;
    currency: CurrencyJSON;
    issuer: string;
}
declare type ChannelJSON = string;
declare type BalanceJSON = CurrencyAmountJSON;
declare type DeliverMinJSON = CurrencyAmountJSON;
declare type AccountAddressJSON = string;
declare type CheckIDJSON = string;
declare type SendMaxJSON = CurrencyAmountJSON;
declare type TransactionSignatureJSON = string;
declare type SigningPublicKeyJSON = string;
declare type ExpirationJSON = number;
declare type AccountJSON = string;
declare type DestinationJSON = AccountAddressJSON;
declare type AmountJSON = CurrencyAmountJSON;
declare type MemoDataJSON = string;
declare type MemoTypeJSON = string;
declare type MemoFormatJSON = string;
declare type UnauthorizeJSON = string;
declare type SequenceJSON = number;
declare type LastLedgerSequenceJSON = number;
declare type XRPDropsAmountJSON = string;
declare type CurrencyAmountJSON = IssuedCurrencyAmountJSON | XRPDropsAmountJSON;
declare type ClearFlagJSON = number;
declare type EmailHashJSON = string;
declare type SetFlagJSON = number;
declare type TickSizeJSON = number;
declare type DestinationTagJSON = number;
declare type TransferRateJSON = number;
declare type DomainJSON = string;
declare type MessageKeyJSON = string;
declare type AuthorizeJSON = string;
declare type InvoiceIdJSON = string;
declare type PathJSON = PathElementJSON[];
declare type CurrencyJSON = string;
declare type TakerGetsJSON = CurrencyAmountJSON;
declare type TakerPaysJSON = CurrencyAmountJSON;
declare type OfferSequenceJSON = number;
declare type OwnerJSON = string;
declare type ConditionJSON = string;
declare type CancelAfterJSON = number;
declare type FinishAfterJSON = number;
declare type SignerQuorumJSON = number;
declare type RegularKeyJSON = AccountAddressJSON;
declare type SettleDelayJSON = number;
declare type PaymentChannelSignatureJSON = string;
declare type PublicKeyJSON = string;
declare type FulfillmentJSON = string;
declare type SignerWeightJSON = number;
declare type QualityInJSON = number;
declare type QualityOutJSON = number;
declare type LimitAmountJSON = CurrencyAmountJSON;
declare type FlagsJSON = number;
/**
 * Provides functionality to serialize from protocol buffers to JSON objects.
 */
declare const serializer: {
    /**
     * Convert a Transaction to a JSON representation.
     *
     * @param transaction - A Transaction to convert.
     * @param signature - An optional hex encoded signature to include in the transaction.
     * @returns The Transaction as JSON.
     */
    transactionToJSON(transaction: Transaction, signature?: string | undefined): TransactionJSON | undefined;
    /**
     * Convert a Payment to a JSON representation.
     *
     * @param payment - The Payment to convert.
     * @returns The Payment as JSON.
     */
    paymentToJSON(payment: Payment): PaymentJSON | undefined;
    /**
     * Convert a DepositPreauth to a JSON representation.
     *
     * @param depositPreauth - The DepositPreauth to convert.
     * @returns The DepositPreauth as JSON.
     */
    depositPreauthToJSON(depositPreauth: DepositPreauth): DepositPreauthJSON | undefined;
    /**
     * Convert an OfferSequence to a JSON representation.
     *
     * @param offerSequence - The OfferSequence to convert.
     * @returns The OfferSequence as JSON.
     */
    offerSequenceToJSON(offerSequence: OfferSequence): OfferSequenceJSON;
    /**
     * Convert an Owner to a JSON representation.
     *
     * @param owner - The Owner to convert.
     * @returns The Owner as JSON.
     */
    ownerToJSON(owner: Owner): OwnerJSON | undefined;
    /**
     * Convert an EscrowCancel to a JSON representation.
     *
     * @param escrowCancel - The EscrowCancel to convert.
     * @returns The EscrowCancel as JSON.
     */
    escrowCancelToJSON(escrowCancel: EscrowCancel): EscrowCancelJSON | undefined;
    /**
     * Convert an EscrowCreate to a JSON representation.
     *
     * @param escrowCreate - The EscrowCreate to convert.
     * @returns The EscrowCreate as JSON.
     */
    escrowCreateToJSON(escrowCreate: EscrowCreate): EscrowCreateJSON | undefined;
    /**
     * Convert an EscrowFinish to a JSON representation.
     *
     * @param escrowFinish - The EscrowFinish to convert.
     * @returns The EscrowFinish as JSON.
     */
    escrowFinishToJSON(escrowFinish: EscrowFinish): EscrowFinishJSON | undefined;
    /**
     * Convert a AccountSet to a JSON representation.
     *
     * @param accountSet - The AccountSet to convert.
     * @returns The AccountSet as JSON.
     */
    accountSetToJSON(accountSet: AccountSet): AccountSetJSON | undefined;
    /**
     * Convert an XRPDropsAmount to a JSON representation.
     *
     * @param xrpDropsAmount - The XRPAmount to convert.
     * @returns The XRPAmount as JSON.
     */
    xrpAmountToJSON(xrpDropsAmount: XRPDropsAmount): string;
    /**
     * Convert a list of Paths to a JSON representation.
     *
     * @param pathList - A list of Paths to convert.
     * @returns The list as JSON.
     */
    pathListToJSON(pathList: Payment.Path[]): PathJSON[];
    /**
     * Convert a payment's Path to a JSON representation.
     *
     * @param path - The Path to convert.
     * @returns The Path as JSON.
     */
    pathToJSON(path: Payment.Path): PathJSON;
    /**
     * Convert a payment's PathElement to a JSON representation.
     *
     * @param pathElement - The PathElement to convert.
     * @returns The PathElement as JSON.
     */
    pathElementToJSON(pathElement: Payment.PathElement): PathElementJSON;
    /**
     * Convert an array of Memo objects to a JSON representation keyed by
     * a field called 'Memos' iff the array is not empty and it contains
     * non-empty objects.
     *
     * @param memos - The Memos to convert.
     *
     * @returns An array of the Memos in JSON format, or undefined.
     */
    memoListToJSON(memos: Memo[]): MemoJSON[];
    /**
     * Convert a Memo to a JSON representation.
     *
     * @param memo - The Memo to convert.
     * @returns The Memo as JSON.
     */
    memoToJSON(memo: Memo): MemoJSON;
    /**
     * Convert a MemoData to a JSON representation.
     *
     * @param memoData - The MemoData to convert.
     * @returns The MemoData as JSON.
     */
    memoDataToJSON(memoData: MemoData): MemoDataJSON;
    /**
     * Convert a MemoFormat to a JSON representation.
     *
     * @param memoFormat - The MemoFormat to convert.
     * @returns The MemoFormat as JSON.
     */
    memoFormatToJSON(memoFormat: MemoFormat): MemoFormatJSON;
    /**
     * Convert a MemoType to a JSON representation.
     *
     * @param memoType - The MemoType to convert.
     * @returns The MemoType as JSON.
     */
    memoTypeToJSON(memoType: MemoType): MemoTypeJSON;
    /**
     * Convert a {@link IssuedCurrencyAmount} to a JSON representation.
     *
     * @param issuedCurrencyAmount - The {@link IssuedCurrencyAmount} to convert.
     * @returns A JSON representation of the input.
     */
    issuedCurrencyAmountToJSON(issuedCurrencyAmount: IssuedCurrencyAmount): IssuedCurrencyAmountJSON | undefined;
    /**
     * Convert a Currency to a JSON representation.
     *
     * @param currency - The Currency to convert.
     * @returns The Currency as JSON.
     */
    currencyToJSON(currency: Currency): CurrencyJSON | undefined;
    /**
     * Convert an Account Address to a JSON representation.
     *
     * @param accountAddress - The AccountAddress to convert.
     * @returns The AccountAddress as JSON.
     */
    accountAddressToJSON(accountAddress: AccountAddress): AccountAddressJSON;
    /**
     * Convert an Unauthorize to a JSON representation.
     *
     * @param unauthorize - The Unauthorize to convert.
     * @returns The Unauthorize as JSON.
     */
    unauthorizeToJSON(unauthorize: Unauthorize): UnauthorizeJSON | undefined;
    /**
     * Convert a Sequence to a JSON representation.
     *
     * @param sequence - The Sequence to convert.
     * @returns The Sequence as JSON.
     */
    sequenceToJSON(sequence: Sequence): SequenceJSON;
    /**
     * Convert a LastLedgerSequence to a JSON representation.
     *
     * @param lastLedgerSequence - The LastLedgerSequence to convert.
     * @returns The LastLedgerSequence as JSON.
     */
    lastLedgerSequenceToJSON(lastLedgerSequence: LastLedgerSequence): LastLedgerSequenceJSON;
    /**
     * Convert a ClearFlag to a JSON representation.
     *
     * @param clearFlag - The ClearFlag to convert.
     * @returns The ClearFlag as JSON.
     */
    clearFlagToJSON(clearFlag: ClearFlag): ClearFlagJSON;
    /**
     * Convert an EmailHash to a JSON representation.
     *
     * @param emailHash - The EmailHash to convert.
     * @returns The EmailHash as JSON.
     */
    emailHashToJSON(emailHash: EmailHash): EmailHashJSON;
    /**
     * Convert a SetFlag to a JSON representation.
     *
     * @param setFlag - The SetFlag to convert.
     * @returns The SetFlag as JSON.
     */
    setFlagToJSON(setFlag: SetFlag): SetFlagJSON;
    /**
     * Convert a TickSize to a JSON representation.
     *
     * @param tickSize - The TickSize to convert.
     * @returns The TickSize as JSON.
     */
    tickSizeToJSON(tickSize: TickSize): TickSizeJSON;
    /**
     * Convert a DestinationTag to a JSON representation.
     *
     * @param destinationTag - The DestinationTag to convert.
     * @returns The DestinationTag as JSON.
     */
    destinationTagToJSON(destinationTag: DestinationTag): DestinationTagJSON;
    /**
     * Convert a TransferRate to a JSON representation.
     *
     * @param transferRate - The TransferRate to convert.
     * @returns The TransferRate as JSON.
     */
    transferRateToJSON(transferRate: TransferRate): TransferRateJSON;
    /**
     * Convert a Domain to a JSON representation.
     *
     * @param domain - The Domain to convert.
     * @returns The Domain as JSON.
     */
    domainToJSON(domain: Domain): DomainJSON;
    /**
     * Convert a MessageKey to a JSON representation.
     *
     * @param messageKey - The MessageKey to convert.
     * @returns The MessageKey as JSON.
     */
    messageKeyToJSON(messageKey: MessageKey): MessageKeyJSON;
    /**
     * Convert an Authorize to a JSON representation.
     *
     * @param authorize - The Authorize to convert.
     * @returns The Authorize as JSON.
     */
    authorizeToJSON(authorize: Authorize): AuthorizeJSON | undefined;
    /**
     * Convert an InvoiceID to a JSON representation.
     *
     * @param invoiceId - The InvoiceID to convert.
     * @returns The InvoiceID as JSON.
     */
    invoiceIdToJSON(invoiceId: InvoiceID): InvoiceIdJSON;
    /**
     * Convert an Amount to a JSON representation.
     *
     * @param amount - The Amount to convert.
     * @returns The Amount as JSON.
     */
    amountToJSON(amount: Amount): AmountJSON | undefined;
    /**
     * Convert a CurrencyAmount to a JSON representation.
     *
     * @param currencyAmount - The CurrencyAmount to convert.
     * @returns The CurrencyAmount as JSON.
     */
    currencyAmountToJSON(currencyAmount: CurrencyAmount): CurrencyAmountJSON | undefined;
    /**
     * Convert a Destination to a JSON representation.
     *
     * @param destination - The Destination to convert.
     * @returns The Destination as JSON.
     */
    destinationToJSON(destination: Destination): DestinationJSON | undefined;
    /**
     * Convert a DeliverMin to a JSON respresentation.
     *
     * @param deliverMin - The DeliverMin to convert.
     * @returns The DeliverMin as JSON.
     */
    deliverMinToJSON(deliverMin: DeliverMin): DeliverMinJSON | undefined;
    /**
     * Convert a CheckID to a JSON representation.
     *
     * @param checkId - The CheckID to convert.
     * @returns The CheckID as JSON.
     */
    checkIDToJSON(checkId: CheckID): CheckIDJSON;
    /**
     * Convert a CheckCancel to a JSON representation.
     *
     * @param checkCancel - The CheckCancel to convert.
     * @returns The CheckCancel as JSON.
     */
    checkCancelToJSON(checkCancel: CheckCancel): CheckCancelJSON | undefined;
    /**
     * Convert a SendMax to a JSON respresentation.
     *
     * @param sendMax - The SendMax to convert.
     * @returns The SendMax as JSON.
     */
    sendMaxToJSON(sendMax: SendMax): SendMaxJSON | undefined;
    /**
     * Convert an TransactionSignature to a JSON representation.
     *
     * @param transactionSignature - The TransactionSignature to convert.
     * @returns The TransactionSignature as JSON.
     */
    transactionSignatureToJSON(transactionSignature: TransactionSignature): TransactionSignatureJSON;
    /**
     * Convert a SigningPublicKey to a JSON representation.
     *
     * @param signingPublicKey - The SigningPublicKey to convert.
     * @returns The SigningPublicKey as JSON.
     */
    signingPublicKeyToJSON(signingPublicKey: SigningPublicKey): SigningPublicKeyJSON;
    /**
     * Convert an Expiration to a JSON representation.
     *
     * @param expiration - The Expiration to convert.
     * @returns The Expiration as JSON.
     */
    expirationToJSON(expiration: Expiration): ExpirationJSON;
    /**
     * Convert a TakerGets to a JSON representation.
     *
     * @param takerGets - The TakerGets to convert.
     * @returns The TakerGets as JSON.
     */
    takerGetsToJSON(takerGets: TakerGets): TakerGetsJSON | undefined;
    /**
     * Convert a TakerPays to a JSON representation.
     *
     * @param takerPays - The TakerPays to convert.
     * @returns The TakerPays as JSON.
     */
    takerPaysToJSON(takerPays: TakerPays): TakerPaysJSON | undefined;
    /**
     * Convert an Account to a JSON representation.
     *
     * @param account - The Account to convert.
     * @returns The Account as JSON.
     */
    accountToJSON(account: Account): AccountJSON | undefined;
    /**
     * Convert an AccountDelete to a JSON representation.
     *
     * @param accountDelete - The AccountDelete to convert.
     * @returns The AccountDelete as JSON.
     */
    accountDeleteToJSON(accountDelete: AccountDelete): AccountDeleteJSON | undefined;
    /**
     * Convert an OfferCancel to a JSON representation.
     *
     * @param offerCancel - The OfferCancel to convert.
     * @returns The OfferCancel as JSON.
     */
    offerCancelToJSON(offerCancel: OfferCancel): OfferCancelJSON | undefined;
    /**
     * Convert a Condition to a JSON representation.
     *
     * @param condition - The Condition to convert.
     * @returns The Condition as JSON.
     */
    conditionToJSON(condition: Condition): ConditionJSON;
    /**
     * Convert a CancelAfter to a JSON representation.
     *
     * @param cancelAfter - The CancelAfter to convert.
     * @returns The CancelAfter as JSON.
     */
    cancelAfterToJSON(cancelAfter: CancelAfter): CancelAfterJSON;
    /**
     * Convert a QualityIn to a JSON representation.
     *
     * @param qualityIn - The QualityIn to convert.
     * @returns The QualityIn as JSON.
     */
    qualityInToJSON(qualityIn: QualityIn): QualityInJSON;
    /**
     * Convert a QualityOut to a JSON representation.
     *
     * @param qualityOut - The QualityOut to convert.
     * @returns The QualityOut as JSON.
     */
    qualityOutToJSON(qualityOut: QualityOut): QualityOutJSON;
    /**
     * Convert a LimitAmount to a JSON representation.
     *
     * @param limitAmount - The LimitAmount to convert.
     * @returns The LimitAmount as JSON.
     */
    limitAmountToJSON(limitAmount: LimitAmount): LimitAmountJSON | undefined;
    /**
     * Convert a FinishAfter to a JSON representation.
     *
     * @param finishAfter - The FinishAfter to convert.
     * @returns The FinishAfter as JSON.
     */
    finishAfterToJSON(finishAfter: FinishAfter): FinishAfterJSON;
    /**
     * Convert a Fulfillment to a JSON representation.
     *
     * @param fulfillment - The Fulfillment to convert.
     * @returns The Fulfillment as JSON.
     */
    fulfillmentToJSON(fulfillment: Fulfillment): FulfillmentJSON;
    /**
     * Convert a CheckCash to a JSON respresentation.
     *
     * @param checkCash - The CheckCash to convert.
     * @returns The CheckCash as JSON.
     */
    checkCashToJSON(checkCash: CheckCash): CheckCashJSON | undefined;
    /**
     * Convert a CheckCreate to a JSON representation.
     *
     * @param checkCreate - The CheckCreate to convert.
     * @returns The CheckCreate as JSON.
     */
    checkCreateToJSON(checkCreate: CheckCreate): CheckCreateJSON | undefined;
    /**
     * Convert a SignerWeight to a JSON representation.
     *
     * @param signerWeight - The SignerWeight to convert.
     * @returns The SignerWeight as JSON.
     */
    signerWeightToJSON(signerWeight: SignerWeight): SignerWeightJSON | undefined;
    /**
     * Convert a Channel to a JSON representation.
     *
     * @param channel - The Channel to convert.
     * @returns The Channel as JSON.
     */
    channelToJSON(channel: Channel): ChannelJSON;
    /**
     * Convert a PaymentChannelClaim to a JSON representation.
     *
     * @param paymentChannelClaim - The PaymentChannelClaim to convert.
     * @returns The PaymentChannelClaim as JSON.
     */
    paymentChannelClaimToJSON(paymentChannelClaim: PaymentChannelClaim): PaymentChannelClaimJSON | undefined;
    /**
     * Convert a SignerQuorum to a JSON representation.
     *
     * @param signerQuorum - The SignerQuorum to convert.
     * @returns The SignerQuorum as JSON.
     */
    signerQuorumToJSON(signerQuorum: SignerQuorum): SignerQuorumJSON;
    /**
     * Convert an OfferCreate to a JSON representation.
     *
     * @param offerCreate - The OfferCreate to convert.
     * @returns The OfferCreate as JSON.
     */
    offerCreateToJSON(offerCreate: OfferCreate): OfferCreateJSON | undefined;
    /**
     * Convert a RegularKey to a JSON representation.
     *
     * @param regularKey - The RegularKey to convert.
     * @returns The RegularKey as JSON.
     */
    regularKeyToJSON(regularKey: RegularKey): RegularKeyJSON | undefined;
    /**
     * Convert a SetRegularKey to a JSON representation.
     *
     * @param setRegularKey - The SetRegularKey to convert.
     * @returns The SetRegularKey as JSON.
     */
    setRegularKeyToJSON(setRegularKey: SetRegularKey): SetRegularKeyJSON | undefined;
    /**
     * Convert a SettleDelay to a JSON representation.
     *
     * @param settleDelay - The SettleDelay to convert.
     * @returns The SettleDelay as JSON.
     */
    settleDelayToJSON(settleDelay: SettleDelay): SettleDelayJSON;
    /**
     * Convert a PaymentChannelSignature to a JSON representation.
     *
     * @param paymentChannelSignature - The PaymentChannelSignature to convert.
     * @returns The PaymentChannelSignature as JSON.
     */
    paymentChannelSignatureToJSON(paymentChannelSignature: PaymentChannelSignature): PaymentChannelSignatureJSON;
    /**
     * Convert a PublicKey to a JSON representation.
     *
     * @param publicKey - The PublicKey to convert.
     * @returns The PublicKey as JSON.
     */
    publicKeyToJSON(publicKey: PublicKey): PublicKeyJSON;
    /**
     * Convert a Balance to a JSON representation.
     *
     * @param balance - The Balance to convert.
     * @returns The Balance as JSON.
     */
    balanceToJSON(balance: Balance): BalanceJSON | undefined;
    /**
     * Convert a TrustSet to a JSON representation.
     *
     * @param trustSet - The TrustSet to convert.
     * @returns The TrustSet as JSON.
     */
    trustSetToJSON(trustSet: TrustSet): TrustSetJSON | undefined;
    /**
     * Convert a SignerEntry to a JSON representation.
     *
     * @param signerEntry - The SignerEntry to convert.
     * @returns The SignerEntry as JSON.
     */
    signerEntryToJSON(signerEntry: SignerEntry): SignerEntryJSON | undefined;
    /**
     * Convert a list of SignerEntry to a JSON representation.
     *
     * If any entry in the list fails conversion, this method will return undefined.
     *
     * @param signerEntryList - The list of `SignerEntry`s to convert.
     * @returns A list of the same `SignerEntry`s as JSON objects.
     */
    signerEntryListToJSON(signerEntryList: SignerEntry[]): SignerEntryJSON[] | undefined;
    /**
     * Convert a SignerListSet to a JSON representation.
     *
     * @param signerListSet - The SignerListSet to convert.
     * @returns The SignerListSet as JSON.
     */
    signerListSetToJSON(signerListSet: SignerListSet): SignerListSetJSON | undefined;
    /**
     * Convert a PaymentChannelCreate to a JSON representation.
     *
     * @param paymentChannelCreate - The PaymentChannelCreate to convert.
     * @returns The PaymentChannelCreate as JSON.
     */
    paymentChannelCreateToJSON(paymentChannelCreate: PaymentChannelCreate): PaymentChannelCreateJSON | undefined;
    /**
     * Convert a PaymentChannelFund to a JSON representation.
     *
     * @param paymentChannelFund - The PaymentChannelFund to convert.
     * @returns The PaymentChannelFund as JSON.
     */
    paymentChannelFundToJSON(paymentChannelFund: PaymentChannelFund): PaymentChannelFundJSON | undefined;
};
export default serializer;
