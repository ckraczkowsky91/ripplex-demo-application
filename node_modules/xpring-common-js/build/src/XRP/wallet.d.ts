/// <reference types="node" />
/**
 * An object which contains artifacts from generating a new wallet.
 *
 * @deprecated Use the WalletFactory class to vend wallets instead.
 */
export interface WalletGenerationResult {
    /** The newly generated Wallet. */
    wallet: Wallet;
    /** The mnemonic used to generate the wallet. */
    mnemonic: string;
    /** The derivation path used to generate the wallet. */
    derivationPath: string;
}
/**
 * A wallet object that has an address and keypair.
 */
declare class Wallet {
    /**
     * The default derivation path to use with BIP44.
     */
    static defaultDerivationPath: string;
    readonly publicKey: string;
    readonly privateKey: string;
    private readonly test;
    /**
     * Create a new Wallet object.
     *
     * @param publicKey - The given public key for the wallet.
     * @param privateKey - The given private key for the wallet.
     * @param test - Whether the address is for use on a test network, defaults to `false`.
     */
    constructor(publicKey: string, privateKey: string, test?: boolean);
    /**
     * Generate a new wallet hierarchical deterministic wallet with a random mnemonic and
     * default derivation path.
     *
     * Secure random number generation is used when entropy is omitted and when the runtime environment has the necessary support.
     * Otherwise, an error is thrown.
     *
     * Runtime environments that do not have secure random number generation should pass their own buffer of entropy.
     *
     * @deprecated Please use methods on `WalletFactory` to generate wallets instead.
     *
     * @param entropy - A optional hex string of entropy.
     * @param test - Whether the address is for use on a test network, defaults to `false`.
     * @returns Artifacts from the wallet generation.
     */
    static generateRandomWallet(entropy?: string | undefined, test?: boolean): WalletGenerationResult | undefined;
    /**
     * Generate a new hierarchical deterministic wallet from a mnemonic and derivation path.
     *
     * @deprecated Please use methods on `WalletFactory` to generate wallets instead.
     *
     * @param mnemonic - The given mnemonic for the wallet.
     * @param derivationPath - The given derivation path to use. If undefined, the default path is used.
     * @param test - Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given mnemonic if the mnemonic was valid, otherwise undefined.
     */
    static generateWalletFromMnemonic(mnemonic: string, derivationPath?: string, test?: boolean): Wallet | undefined;
    /**
     * Generate a new hierarchical deterministic wallet from a seed and derivation path.
     *
     * @deprecated Please use methods on `WalletFactory` to generate wallets instead.
     *
     * @param seed - The given seed for the wallet.
     * @param derivationPath - The given derivation path to use. If undefined, the default path is used.
     * @param test - Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given mnemonic if the mnemonic was valid, otherwise undefined.
     */
    static generateHDWalletFromSeed(seed: Buffer, derivationPath?: string, test?: boolean): Wallet | undefined;
    /**
     * Generate a new wallet from the given seed.
     *
     * @deprecated Please use `WalletFactory` instead.
     *
     * @param seed - The given seed for the wallet.
     * @param test - Whether the address is for use on a test network, defaults to `false`.
     * @returns A new wallet from the given seed, or undefined if the seed was invalid.
     */
    static generateWalletFromSeed(seed: string, test?: boolean): Wallet | undefined;
    /**
     * Gets the x-address associated with a given wallet instance.
     *
     * @returns A string representing the x-address of the wallet.
     *
     * @throws An error if we are unable to derive an address.
     */
    getAddress(): string;
    /**
     * Sign an arbitrary hex string.
     *
     * @param hex - An arbitrary hex string to sign.
     * @returns A signature in hexadecimal format if the input was valid, otherwise undefined.
     */
    sign(hex: string): string | undefined;
    /**
     * Verify a signature is valid for a message.
     *
     * @param message - A message in hex format.
     * @param signature - A signature in hex format.
     * @returns True if the signature is valid, otherwise false.
     */
    verify(message: string, signature: string): boolean;
}
export default Wallet;
