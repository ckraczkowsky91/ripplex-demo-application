import HdWalletGenerationResult from './hd-wallet-generation-result';
import SeedWalletGenerationResult from './seed-wallet-generation-result';
import Wallet from './wallet';
import XrplNetwork from './xrpl-network';
/**
 * Encapsulates various methods for generating Wallets.
 */
export default class WalletFactory {
    /**
     * The default derivation path to use with BIP44.
     */
    static defaultDerivationPath: string;
    /** The network the WalletFactory is attached to. */
    readonly network: XrplNetwork;
    private readonly isTest;
    /**
     * Initialize a new WalletFactory.
     *
     * @param network - The network the wallet factory is attached to.
     */
    constructor(network: XrplNetwork);
    /**
     * Generate a new HD wallet with a random mnemonic and the default XRP derivation path.
     *
     * Secure random number generation is used when entropy is omitted and when the runtime environment has the necessary support.
     * Otherwise, an error is thrown.
     *
     * Runtime environments that do not have secure random number generation should pass their own buffer of entropy.
     *
     * @param entropy - An optional hex string of entropy.
     * @returns A result which contains the newly generated wallet and associated artifacts.
     */
    generateRandomHdWallet(entropy?: string | undefined): Promise<HdWalletGenerationResult | undefined>;
    /**
     * Generate a new wallet with a random seed.
     *
     * Secure random number generation is used when entropy is omitted and when the runtime environment has the necessary support.
     * Otherwise, an error is thrown.
     *
     * Runtime environments that do not have secure random number generation should pass their own buffer of entropy.
     *
     * @param entropy - A optional hex string of entropy.
     * @returns A result which contains the newly generated wallet and associated artifacts.
     */
    generateRandomWallet(entropy?: string | undefined): Promise<SeedWalletGenerationResult | undefined>;
    /**
     * Generate a new hierarchical deterministic wallet from a mnemonic and derivation path.
     *
     * @param mnemonic - The mnemonic to generate the wallet.
     * @param derivationPath - The given derivation path to use. If undefined, the default path is used.
     * @returns A new wallet from the given mnemonic if the mnemonic was valid, otherwise undefined.
     */
    walletFromMnemonicAndDerivationPath(mnemonic: string, derivationPath?: string): Promise<Wallet | undefined>;
    /**
     * Generate a new hierarchical deterministic wallet from a seed and derivation path.
     *
     * @param seed - A hex encoded seed string.
     * @param derivationPath - The given derivation path to use. If undefined, the default path is used.
     * @returns A new wallet from the given seed if the seed was valid, otherwise undefined.
     */
    walletFromSeedAndDerivationPath(seed: string, derivationPath?: string): Wallet | undefined;
    /**
     * Generate a new wallet from the given seed.
     *
     * @param seed - A base58check encoded seed string.
     * @returns A new wallet from the given seed, or undefined if the seed was invalid.
     */
    walletFromSeed(seed: string): Wallet | undefined;
    /**
     * Generate a new wallet with the given keys.
     *
     * @param publicKey - A hexadecimal encoded public key.
     * @param privateKey -  A hexadecimal encoded private key.
     *
     * @returns A new wallet with a given public and private key,
     *          on TESTNET or MAINNET depending on the WalletFactory instance.
     */
    walletFromKeys(publicKey: string, privateKey: string): Wallet | undefined;
}
