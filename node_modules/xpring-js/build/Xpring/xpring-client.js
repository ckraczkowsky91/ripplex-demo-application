"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const xpring_error_1 = __importDefault(require("./xpring-error"));
/**
 * Composes interactions of Xpring services.
 */
class XpringClient {
    /**
     * Create a new XpringClient.
     *
     * @param payIdClient A PayID Client used to interact with the PayID protocol.
     * @param xrpClient An XRP Client used to interact with the XRP Ledger protocol.
     * @throws A XpringError if the networks of the inputs do not match.
     */
    constructor(payIdClient, xrpClient) {
        this.xrpClient = xrpClient;
        this.payIdClient = payIdClient;
        // Verify that networks match.
        const payIdNetwork = payIdClient.xrplNetwork;
        const xrpNetwork = xrpClient.network;
        if (payIdNetwork !== xrpNetwork) {
            throw xpring_error_1.default.mismatchedNetworks;
        }
    }
    /**
     * Send the given amount of XRP from the source wallet to the destination PayID.
     *
     * @param amount A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param destinationPayID A destination PayID to send the drops to.
     * @param sender The wallet that XRP will be sent from and which will sign the request.
     * @returns A promise which resolves to a string representing the hash of the submitted transaction.
     */
    async send(amount, destinationPayID, sender) {
        return this.sendWithDetails({
            amount,
            destination: destinationPayID,
            sender,
        });
    }
    /**
     * Send the given amount of XRP from the source wallet to the destination PayID, allowing
     * for additional details to be specified for use with supplementary features of the XRP
     * ledger.
     *
     * @param sendXrpDetails - a wrapper object containing details for constructing a transaction.
     * @returns A promise which resolves to a string representing the hash of the submitted transaction.
     */
    async sendWithDetails(sendXrpDetails) {
        const { amount, destination: destinationPayID, sender, memoList, } = sendXrpDetails;
        // Resolve the destination address to an XRP address.
        const destinationAddress = await this.payIdClient.xrpAddressForPayId(destinationPayID);
        // Transact XRP to the resolved address.
        const transactionResult = await this.xrpClient.sendXrpWithDetails({
            amount,
            destination: destinationAddress,
            sender,
            memoList,
        });
        return transactionResult.hash;
    }
}
exports.default = XpringClient;
//# sourceMappingURL=xpring-client.js.map