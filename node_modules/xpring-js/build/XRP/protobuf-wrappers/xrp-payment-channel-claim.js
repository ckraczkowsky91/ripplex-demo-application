"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_currency_amount_1 = __importDefault(require("./xrp-currency-amount"));
/*
 * Represents a PaymentChannelClaim transaction on the XRP Ledger.
 *
 * A PaymentChannelClaim transaction claims XRP from a payment channel, adjusts the payment channel's expiration, or both.
 *
 * @see: https://xrpl.org/paymentchannelclaim.html
 */
class XrpPaymentChannelClaim {
    /**
     * @param channel The unique ID of the channel, as a 64-character hexadecimal string.
     * @param balance (Optional) Total amount of XRP, in drops, delivered by this channel after processing this claim.
     *                Required to deliver XRP. Must be more than the total amount delivered by the channel so far,
     *                but not greater than the Amount of the signed claim. Must be provided except when closing the channel.
     * @param amount (Optional) The amount of XRP, in drops, authorized by the Signature.
     *                This must match the amount in the signed message.
     *                This is the cumulative amount of XRP that can be dispensed by the channel, including XRP previously redeemed.
     * @param signature (Optional) The signature of this claim, as hexadecimal. The signed message contains the channel ID and the
     *                  amount of the claim. Required unless the sender of the transaction is the source address of the channel.
     * @param publicKey (Optional) The public key used for the signature, as hexadecimal. This must match the PublicKey stored
     *                  in the ledger for the channel. Required unless the sender of the transaction is the source address of
     *                  the channel and the Signature field is omitted. (The transaction includes the PubKey so that rippled
     *                  can check the validity of the signature before trying to apply the transaction to the ledger.)
     */
    constructor(channel, balance, amount, signature, publicKey) {
        this.channel = channel;
        this.balance = balance;
        this.amount = amount;
        this.signature = signature;
        this.publicKey = publicKey;
    }
    /**
     * Constructs an XrpPaymentChannelClaim from a PaymentChannelClaim protocol buffer.
     *
     * @param paymentChannelClaim a PaymentChannelClaim (protobuf object) whose field values will be used to construct an XrpPaymentChannelClaim
     * @return an XrpPaymentChannelClaim with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L258
     */
    static from(paymentChannelClaim) {
        var _a, _b, _c, _d, _e;
        const channel = (_a = paymentChannelClaim.getChannel()) === null || _a === void 0 ? void 0 : _a.getValue_asB64();
        if (!channel) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'PaymentChannelClaim protobuf does not contain `channel` field.');
        }
        const balanceCurrencyAmount = (_b = paymentChannelClaim.getBalance()) === null || _b === void 0 ? void 0 : _b.getValue();
        let balance;
        if (balanceCurrencyAmount) {
            balance = xrp_currency_amount_1.default.from(balanceCurrencyAmount);
        }
        const amountCurrencyAmount = (_c = paymentChannelClaim.getAmount()) === null || _c === void 0 ? void 0 : _c.getValue();
        let amount;
        if (amountCurrencyAmount) {
            amount = xrp_currency_amount_1.default.from(amountCurrencyAmount);
        }
        const signature = (_d = paymentChannelClaim
            .getPaymentChannelSignature()) === null || _d === void 0 ? void 0 : _d.getValue_asB64();
        const publicKey = (_e = paymentChannelClaim.getPublicKey()) === null || _e === void 0 ? void 0 : _e.getValue_asB64();
        if (signature && !publicKey) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'PaymentChannelClaim protobuf does not contain `publicKey` field when `signature` field is provided.');
        }
        return new XrpPaymentChannelClaim(channel, balance, amount, signature, publicKey);
    }
}
exports.default = XrpPaymentChannelClaim;
//# sourceMappingURL=xrp-payment-channel-claim.js.map