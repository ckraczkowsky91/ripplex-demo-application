"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xpring_common_js_1 = require("xpring-common-js");
const xrp_utils_1 = __importDefault(require("../shared/xrp-utils"));
/*
 * Represents an EscrowCancel transaction on the XRP Ledger.
 *
 * An EscrowCancel transaction returns escrowed XRP to the sender.
 *
 * @see: https://xrpl.org/escrowcancel.html
 */
class XrpEscrowCancel {
    /**
     * @param ownerXAddress Address of the source account that funded the escrow payment, encoded as an X-address (see https://xrpaddress.info/).
     * @param offerSequence Transaction sequence of EscrowCreate transaction that created the escrow to cancel.
     */
    constructor(ownerXAddress, offerSequence) {
        this.ownerXAddress = ownerXAddress;
        this.offerSequence = offerSequence;
    }
    /**
     * Constructs an XrpEscrowCancel from an EscrowCancel protocol buffer.
     *
     * @param escrowCancel an EscrowCancel (protobuf object) whose field values will be used to construct an XrpEscrowCancel
     * @return an XrpEscrowCancel with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L170
     */
    static from(escrowCancel, xrplNetwork) {
        var _a, _b, _c;
        const owner = (_b = (_a = escrowCancel.getOwner()) === null || _a === void 0 ? void 0 : _a.getValue()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (!owner) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'EscrowCancel protobuf is missing valid `owner` field.');
        }
        const ownerXAddress = xrp_utils_1.default.encodeXAddress(owner, undefined, xrplNetwork == xpring_common_js_1.XrplNetwork.Test || xrplNetwork == xpring_common_js_1.XrplNetwork.Dev);
        // ownerXAddress and offerSequence are both required fields.
        if (!ownerXAddress) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct XAddress from EscrowCancel protobuf `owner` field.');
        }
        const offerSequence = (_c = escrowCancel.getOfferSequence()) === null || _c === void 0 ? void 0 : _c.getValue();
        if (!offerSequence) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'EscrowCancel protobuf is missing valid `offerSequence` field.');
        }
        return new XrpEscrowCancel(ownerXAddress, offerSequence);
    }
}
exports.default = XrpEscrowCancel;
//# sourceMappingURL=xrp-escrow-cancel.js.map