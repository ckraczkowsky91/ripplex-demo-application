"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
/*
 * Represents an AccountSet transaction on the XRP Ledger.
 *
 * An AccountSet transaction modifies the properties of an account in the XRP Ledger.
 *
 * @see: https://xrpl.org/accountset.html
 */
class XrpAccountSet {
    /**
     * @param clearFlag (Optional) Unique identifier of a flag to disable for this account.
     * @param domain (Optional) The domain that owns this account, as a string of hex representing the ASCII for the domain in lowercase.
     * @param emailHash (Optional) Hash of an email address to be used for generating an avatar image.
     * @param messageKey (Optional) Public key for sending encrypted messages to this account.
     * @param setFlag (Optional) Integer flag to enable for this account.
     * @param transferRate (Optional) The fee to charge when users transfer this account's issued currencies, represented as billionths of a unit.
     *                     Cannot be more than 2000000000 or less than 1000000000, except for the special case 0 meaning no fee.
     * @param tickSize (Optional) Tick size to use for offers involving a currency issued by this address.
     *                  The exchange rates of those offers is rounded to this many significant digits.
     *                  Valid values are 3 to 15 inclusive, or 0 to disable. (Requires the TickSize amendment.)
     */
    constructor(clearFlag, domain, emailHash, messageKey, setFlag, transferRate, tickSize) {
        this.clearFlag = clearFlag;
        this.domain = domain;
        this.emailHash = emailHash;
        this.messageKey = messageKey;
        this.setFlag = setFlag;
        this.transferRate = transferRate;
        this.tickSize = tickSize;
    }
    /**
     * Constructs an XrpAccountSet from an AccountSet.
     *
     * @param accountSet an AccountSet (protobuf object) whose field values will be used
     *                to construct an XrpAccountSet
     * @return an XrpAccountSet with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L100
     */
    static from(accountSet) {
        var _a, _b, _c, _d, _e, _f, _g;
        const clearFlag = (_a = accountSet.getClearFlag()) === null || _a === void 0 ? void 0 : _a.getValue();
        const domain = (_b = accountSet.getDomain()) === null || _b === void 0 ? void 0 : _b.getValue();
        if (domain !== undefined && (domain === null || domain === void 0 ? void 0 : domain.toLowerCase()) !== domain) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'AccountSet protobuf field `domain` is not lowercase.');
        }
        const emailHash = (_c = accountSet.getEmailHash()) === null || _c === void 0 ? void 0 : _c.getValue_asU8();
        const messageKey = (_d = accountSet.getMessageKey()) === null || _d === void 0 ? void 0 : _d.getValue_asU8();
        const setFlag = (_e = accountSet.getSetFlag()) === null || _e === void 0 ? void 0 : _e.getValue();
        if (clearFlag !== undefined &&
            setFlag !== undefined &&
            clearFlag === setFlag) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'AccountSet protobuf fields `clearFlag` and `setFlag` are equal.');
        }
        const transferRate = (_f = accountSet.getTransferRate()) === null || _f === void 0 ? void 0 : _f.getValue();
        if (transferRate != undefined) {
            const maxTransferRate = 2000000000;
            const minTransferRate = 1000000000;
            const specialCaseTransferRate = 0;
            if (transferRate > maxTransferRate) {
                throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, `AccountSet protobuf field \`transferRate\` is above ${maxTransferRate}.`);
            }
            if (transferRate < minTransferRate &&
                transferRate !== specialCaseTransferRate) {
                throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, `AccountSet protobuf field \`transferRate\` is below ${minTransferRate}.`);
            }
        }
        const tickSize = (_g = accountSet.getTickSize()) === null || _g === void 0 ? void 0 : _g.getValue();
        if (tickSize !== undefined && !this.isValidTickSize(tickSize)) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'AccountSet protobuf field `tickSize` not between 3 and 15, inclusive, or 0.');
        }
        return new XrpAccountSet(clearFlag, domain, emailHash, messageKey, setFlag, transferRate, tickSize);
    }
    static isValidTickSize(tickSize) {
        const minTickSize = 3;
        const maxTickSize = 15;
        const disableTickSize = 0;
        return ((minTickSize <= tickSize && tickSize <= maxTickSize) ||
            tickSize === disableTickSize);
    }
}
exports.default = XrpAccountSet;
//# sourceMappingURL=xrp-account-set.js.map