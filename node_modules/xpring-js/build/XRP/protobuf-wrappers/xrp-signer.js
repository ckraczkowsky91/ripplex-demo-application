"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xpring_common_js_1 = require("xpring-common-js");
const xrp_utils_1 = __importDefault(require("../shared/xrp-utils"));
/*
 * Represents a signer of a transaction on the XRP Ledger.
 * @see: https://xrpl.org/transaction-common-fields.html#signers-field
 */
class XrpSigner {
    /**
     * @param accountXAddress The address associated with this signature, as it appears in the SignerList, encoded as an
     *                X-address (see https://xrpaddress.info/).
     * @param signingPublicKey The public key used to create this signature.
     * @param transactionSignature A signature for this transaction, verifiable using the SigningPubKey.
     */
    constructor(accountXAddress, signingPublicKey, transactionSignature) {
        this.accountXAddress = accountXAddress;
        this.signingPublicKey = signingPublicKey;
        this.transactionSignature = transactionSignature;
    }
    /**
     * Constructs an XrpSigner from a Signer.
     *
     * @param signer a Signer (protobuf object) whose field values will be used
     *               to construct an XrpSigner
     * @return an XrpSigner with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/develop/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L90
     */
    static from(signer, xrplNetwork) {
        var _a, _b, _c, _d;
        const account = (_b = (_a = signer.getAccount()) === null || _a === void 0 ? void 0 : _a.getValue()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (!account) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Signer protobuf is missing `account` field.');
        }
        const accountXAddress = xrp_utils_1.default.encodeXAddress(account, undefined, xrplNetwork == xpring_common_js_1.XrplNetwork.Test || xrplNetwork == xpring_common_js_1.XrplNetwork.Dev);
        if (!accountXAddress) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct XAddress from Signer protobuf `account` field.');
        }
        const signingPublicKey = (_c = signer.getSigningPublicKey()) === null || _c === void 0 ? void 0 : _c.getValue_asU8();
        if (!signingPublicKey) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Signer protobuf is missing `SigningPublicKey` field.');
        }
        const transactionSignature = (_d = signer
            .getTransactionSignature()) === null || _d === void 0 ? void 0 : _d.getValue_asU8();
        if (!transactionSignature) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Signer protobuf is missing `TransactionSignature` field.');
        }
        return new XrpSigner(accountXAddress, signingPublicKey, transactionSignature);
    }
}
exports.default = XrpSigner;
//# sourceMappingURL=xrp-signer.js.map