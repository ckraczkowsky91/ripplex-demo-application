"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_signer_entry_1 = __importDefault(require("./xrp-signer-entry"));
/*
 * Represents a SignerListSet transaction on the XRP Ledger.
 *
 * A SignerListSet transaction creates, replaces, or removes a list of signers that can be used to multi-sign a
 * transaction. This transaction type was introduced by the MultiSign amendment.
 *
 * @see: https://xrpl.org/signerlistset.html
 */
class XrpSignerListSet {
    /**
     * @param signerQuorum A target number for the signer weights. A multi-signature from this list is valid only if the sum weights
     *                     of the signatures provided is greater than or equal to this value. To delete a SignerList, use the value 0.
     * @param signerEntries (Omitted when deleting) Array of XRPSignerEntry objects, indicating the addresses and weights of signers in this list.
     *                      A SignerList must have at least 1 member and no more than 8 members. No address may appear more than once in the list,
     *                      nor may the Account submitting the transaction appear in the list.
     */
    constructor(signerQuorum, signerEntries) {
        this.signerQuorum = signerQuorum;
        this.signerEntries = signerEntries;
    }
    /**
     * Constructs an XrpSignerListSet from a SignerListSet protocol buffer.
     *
     * @param signerListSet a SignerListSet (protobuf object) whose field values will be used to construct an XrpSignerListSet
     * @return an XrpSignerListSet with its fields set via the analogous protobuf fields.
     * @see  https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L304
     */
    static from(signerListSet, xrplNetwork) {
        var _a;
        const signerQuorum = (_a = signerListSet.getSignerQuorum()) === null || _a === void 0 ? void 0 : _a.getValue();
        if (signerQuorum === undefined) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerListSet protobuf does not contain `SignerQuorum` field.');
        }
        const signerEntries = signerListSet
            .getSignerEntriesList()
            .map((signerEntry) => xrp_signer_entry_1.default.from(signerEntry, xrplNetwork));
        if (signerQuorum !== 0) {
            if (signerEntries.length === 0) {
                throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerListSet protobuf does not contain `signerEntries` field with nonzero `signerQuorum` field.');
            }
            const maxSignerEntryLength = 8;
            if (signerEntries.length > maxSignerEntryLength) {
                throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerListSet protobuf has greater than 8 members in the `signerEntries` field.');
            }
            const accounts = new Set();
            signerEntries.forEach((signerEntry) => {
                const signerAccountXAddress = signerEntry.accountXAddress;
                if (accounts.has(signerAccountXAddress)) {
                    throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerListSet protobuf contains repeat account addresses in the `signerEntries` field.');
                }
                accounts.add(signerAccountXAddress);
            });
        }
        return new XrpSignerListSet(signerQuorum, signerEntries);
    }
}
exports.default = XrpSignerListSet;
//# sourceMappingURL=xrp-signer-list-set.js.map