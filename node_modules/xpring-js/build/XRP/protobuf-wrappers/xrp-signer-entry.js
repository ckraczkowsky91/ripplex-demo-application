"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_utils_1 = __importDefault(require("../shared/xrp-utils"));
const xpring_common_js_1 = require("xpring-common-js");
/*
 * Represents a SignerEntry object on the XRP Ledger.
 *
 * @see: https://xrpl.org/signerlist.html#signerentry-object
 */
class XrpSignerEntry {
    /**
     * @param account An XRP Ledger address whose signature contributes to the multi-signature, encoded as an
     *                X-address (see https://xrpaddress.info/). It does not need to be a funded address in the ledger.
     * @param signerWeight The weight of a signature from this signer. A multi-signature is only valid if the sum
     *                     weight of the signatures provided meets or exceeds the SignerList's SignerQuorum value.
     */
    constructor(accountXAddress, signerWeight) {
        this.accountXAddress = accountXAddress;
        this.signerWeight = signerWeight;
    }
    /**
     * Constructs an XrpSignerEntry from a SignerEntry protocol buffer.
     *
     * @param signerEntry a SignerEntry (protobuf object) whose field values will be used to construct an XrpSignerEntry
     * @return an XrpSignerEntry with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/f43aeda49c5362dc83c66507cae2ec71cfa7bfdf/src/ripple/proto/org/xrpl/rpc/v1/common.proto#L471
     */
    static from(signerEntry, xrplNetwork) {
        var _a, _b, _c;
        const account = (_b = (_a = signerEntry.getAccount()) === null || _a === void 0 ? void 0 : _a.getValue()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (!account) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerEntry protobuf does not contain `account` field.');
        }
        const accountXAddress = xrp_utils_1.default.encodeXAddress(account, undefined, xrplNetwork == xpring_common_js_1.XrplNetwork.Test || xrplNetwork == xpring_common_js_1.XrplNetwork.Dev);
        if (!accountXAddress) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct XAddress from SignerEntry protobuf `account` field.');
        }
        const signerWeight = (_c = signerEntry.getSignerWeight()) === null || _c === void 0 ? void 0 : _c.getValue();
        if (signerWeight === undefined) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'SignerEntry protobuf does not contain `signerWeight` field.');
        }
        return new XrpSignerEntry(accountXAddress, signerWeight);
    }
}
exports.default = XrpSignerEntry;
//# sourceMappingURL=xrp-signer-entry.js.map