"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xpring_common_js_1 = require("xpring-common-js");
const xrp_utils_1 = __importDefault(require("../shared/xrp-utils"));
/*
 * Represents an AccountDelete transaction on the XRP Ledger.
 *
 * An AccountDelete transaction deletes an account and any objects it owns in the XRP Ledger,
 * if possible, sending the account's remaining XRP to a specified destination account.
 *
 * @see: https://xrpl.org/accountdelete.html
 */
class XrpAccountDelete {
    /**
     * @param destinationXAddress The address and destination tag of an account to receive any leftover XRP after deleting the
     *                            sending account, encoded as an X-address (see https://xrpaddress.info/).
     *                            Must be a funded account in the ledger, and must not be the sending account.
     */
    constructor(destinationXAddress) {
        this.destinationXAddress = destinationXAddress;
    }
    /**
     * Constructs an XrpAccountDelete from an AccountDelete protocol buffer.
     *
     * @param accountDelete an AccountDelete (protobuf object) whose field values will be used
     *                to construct an XrpAccountDelete
     * @return an XrpAccountDelete with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L118
     */
    static from(accountDelete, xrplNetwork) {
        var _a, _b, _c;
        const destination = (_b = (_a = accountDelete.getDestination()) === null || _a === void 0 ? void 0 : _a.getValue()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (!destination) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'AccountDelete protobuf is missing `destination` field.');
        }
        const destinationTag = (_c = accountDelete.getDestinationTag()) === null || _c === void 0 ? void 0 : _c.getValue();
        const destinationXAddress = xrp_utils_1.default.encodeXAddress(destination, destinationTag, xrplNetwork == xpring_common_js_1.XrplNetwork.Test || xrplNetwork == xpring_common_js_1.XrplNetwork.Dev);
        if (!destinationXAddress) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct XAddress from AccountDelete protobuf `destination` and `destinationTag` fields.');
        }
        return new XrpAccountDelete(destinationXAddress);
    }
}
exports.default = XrpAccountDelete;
//# sourceMappingURL=xrp-account-delete.js.map