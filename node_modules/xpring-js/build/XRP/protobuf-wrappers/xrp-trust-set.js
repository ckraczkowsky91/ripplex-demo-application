"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_currency_amount_1 = __importDefault(require("./xrp-currency-amount"));
/*
 * Represents a TrustSet transaction on the XRP Ledger.
 *
 * A TrustSet transaction creates or modifies a trust line linking two accounts.
 *
 * @see: https://xrpl.org/trustset.html
 */
class XrpTrustSet {
    /**
     * @param limitAmount Object defining the trust line to create or modify, in the format of an XrpCurrencyAmount.
     *                    limitAmount.currency: The currency this trust line applies to, as a three-letter ISO 4217 Currency Code,
     *                                           or a 160-bit hex value according to currency format. "XRP" is invalid.
     *                    limitAmount.value: Quoted decimal representation of the limit to set on this trust line.
     *                    limitAmount.issuer: The address of the account to extend trust to.
     * @param qualityIn (Optional) Value incoming balances on this trust line at the ratio of this number per 1,000,000,000 units.
     *                   A value of 0 is shorthand for treating balances at face value.
     * @param qualityOut (Optional) Value outgoing balances on this trust line at the ratio of this number per 1,000,000,000 units.
     *                    A value of 0 is shorthand for treating balances at face value.
     */
    constructor(limitAmount, qualityIn, qualityOut) {
        this.limitAmount = limitAmount;
        this.qualityIn = qualityIn;
        this.qualityOut = qualityOut;
    }
    /**
     * Constructs an XrpTrustSet from a TrustSet protocol buffer.
     *
     * @param trustSet a TrustSet (protobuf object) whose field values will be used to construct an XrpTrustSet
     * @return an XrpTrustSet with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L312
     */
    static from(trustSet) {
        var _a, _b, _c;
        const limitAmountCurrencyAmount = (_a = trustSet.getLimitAmount()) === null || _a === void 0 ? void 0 : _a.getValue();
        if (!limitAmountCurrencyAmount) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'TrustSet protobuf missing required field `LimitAmount`.');
        }
        const limitAmount = xrp_currency_amount_1.default.from(limitAmountCurrencyAmount);
        if (!limitAmount.issuedCurrency) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'TrustSet protobuf does not use issued currency.');
        }
        const qualityIn = (_b = trustSet.getQualityIn()) === null || _b === void 0 ? void 0 : _b.getValue();
        const qualityOut = (_c = trustSet.getQualityOut()) === null || _c === void 0 ? void 0 : _c.getValue();
        return new XrpTrustSet(limitAmount, qualityIn, qualityOut);
    }
}
exports.default = XrpTrustSet;
//# sourceMappingURL=xrp-trust-set.js.map