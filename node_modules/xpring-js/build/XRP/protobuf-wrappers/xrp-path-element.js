"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_currency_1 = __importDefault(require("./xrp-currency"));
/*
 * A path step in an XRP Ledger Path.
 * @see: https://xrpl.org/paths.html#path-steps
 */
class XrpPathElement {
    /**
     *
     * @param account (Optional) If present, this path step represents rippling through the specified address.
     *                MUST NOT be provided if this path element specifies the currency or issuer fields.
     * @param currency (Optional) If present, this path element represents changing currencies through an order book.
     *                 The currency specified indicates the new currency. MUST NOT be provided if this path
     *                 element specifies the account field.
     * @param issuer (Optional) If present, this path element represents changing currencies and this address
     *                defines the issuer of the new currency. If omitted in a path element with a non-XRP currency,
     *                a previous element of the path defines the issuer. If present when currency is omitted,
     *                indicates a path element that uses an order book between same-named currencies with different issuers.
     *                MUST be omitted if the currency is XRP. MUST NOT be provided if this element specifies the account field.
     */
    constructor(account, currency, issuer) {
        this.account = account;
        this.currency = currency;
        this.issuer = issuer;
    }
    /**
     * Constructs an XrpPathElement from a PathElement.
     *
     * @param pathElement a PathElement (protobuf object) whose field values will be used
     *                    to construct an XrpPathElement
     * @returns an XrpPathElement with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/develop/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L227
     */
    static from(pathElement) {
        var _a, _b;
        const account = (_a = pathElement.getAccount()) === null || _a === void 0 ? void 0 : _a.getAddress();
        const currency = pathElement.getCurrency();
        if (account && currency) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'PathElement protobuf should not contain both `account` and `currency` fields.');
        }
        const issuer = (_b = pathElement.getIssuer()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (account && issuer) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'PathElement protobuf should not contain both `account` and `issuer` fields.');
        }
        // TODO check that `issuer` is omitted if the `currency` is XRP
        const xrpCurrency = currency && xrp_currency_1.default.from(currency);
        if (!account && !xrpCurrency && !issuer) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'PathElement protobuf is missing all fields.');
        }
        return new XrpPathElement(account, xrpCurrency, issuer);
    }
}
exports.default = XrpPathElement;
//# sourceMappingURL=xrp-path-element.js.map