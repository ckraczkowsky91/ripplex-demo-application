"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xpring_common_js_1 = require("xpring-common-js");
const xrp_utils_1 = __importDefault(require("../shared/xrp-utils"));
/*
 * Represents an EscrowFinish transaction on the XRP Ledger.
 *
 * An EscrowFinish transaction delivers XRP from a held payment to the recipient.
 *
 * @see: https://xrpl.org/escrowfinish.html
 */
class XrpEscrowFinish {
    /**
     * @param ownerXAddress Address of the source account that funded the held payment, encoded as an X-address (see https://xrpaddress.info/).
     * @param offerSequence Transaction sequence of EscrowCreate transaction that created the held payment to finish.
     * @param condition (Optional) Hex value matching the previously-supplied PREIMAGE-SHA-256 crypto-condition  of the held payment.
     * @param fulfillment (Optional) Hex value of the PREIMAGE-SHA-256 crypto-condition fulfillment  matching the held payment's Condition.
     */
    constructor(ownerXAddress, offerSequence, condition, fulfillment) {
        this.ownerXAddress = ownerXAddress;
        this.offerSequence = offerSequence;
        this.condition = condition;
        this.fulfillment = fulfillment;
    }
    /**
     * Constructs an XrpEscrowFinish from an EscrowFinish protocol buffer.
     *
     * @param escrowFinish an EscrowFinish (protobuf object) whose field values will be used to construct an XrpEscrowFinish
     * @return an XrpEscrowFinish with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L194
     */
    static from(escrowFinish, xrplNetwork) {
        var _a, _b, _c, _d, _e;
        const owner = (_b = (_a = escrowFinish.getOwner()) === null || _a === void 0 ? void 0 : _a.getValue()) === null || _b === void 0 ? void 0 : _b.getAddress();
        if (!owner) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'EscrowFinish protobuf is missing required `owner` field.');
        }
        const ownerXAddress = xrp_utils_1.default.encodeXAddress(owner, undefined, xrplNetwork === xpring_common_js_1.XrplNetwork.Test || xrplNetwork === xpring_common_js_1.XrplNetwork.Dev);
        if (!ownerXAddress) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Cannot construct XAddress from EscrowFinish protobuf `owner` field.');
        }
        const offerSequence = (_c = escrowFinish.getOfferSequence()) === null || _c === void 0 ? void 0 : _c.getValue();
        if (offerSequence === undefined) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'EscrowFinish protobuf is missing required `offerSequence` field.');
        }
        const condition = (_d = escrowFinish.getCondition()) === null || _d === void 0 ? void 0 : _d.getValue_asB64();
        const fulfillment = (_e = escrowFinish.getFulfillment()) === null || _e === void 0 ? void 0 : _e.getValue_asB64();
        return new XrpEscrowFinish(ownerXAddress, offerSequence, condition, fulfillment);
    }
}
exports.default = XrpEscrowFinish;
//# sourceMappingURL=xrp-escrow-finish.js.map