import { XrplNetwork } from 'xpring-common-js';
import { Payment } from '../Generated/web/org/xrpl/rpc/v1/transaction_pb';
import XrpCurrencyAmount from './xrp-currency-amount';
import XrpPath from './xrp-path';
/**
 * Represents a payment on the XRP Ledger.
 * @see: https://xrpl.org/payment.html
 */
export default class XrpPayment {
    readonly amount: XrpCurrencyAmount;
    readonly destinationXAddress: string;
    readonly deliverMin?: XrpCurrencyAmount | undefined;
    readonly invoiceID?: Uint8Array | undefined;
    readonly paths?: (XrpPath | undefined)[] | undefined;
    readonly sendMax?: XrpCurrencyAmount | undefined;
    /**
     * Constructs an XrpPayment from a Payment.
     *
     * @param payment a Payment (protobuf object) whose field values will be used
     *                to construct an XrpPayment
     * @param xrplNetwork The Xrpl network from which this object was retrieved.
     * @return an XrpPayment with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/develop/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L224
     */
    static from(payment: Payment, xrplNetwork: XrplNetwork): XrpPayment;
    /**
     * @param amount The amount of currency to deliver.
     * @param destinationXAddress The address and (optional) destination tag of the account receiving the payment, encoded in X-address format.
     *                            See https://xrpaddress.info/.
     * @param deliverMin (Optional) Minimum amount of destination currency this transaction should deliver.
     * @param invoiceID (Optional) Arbitrary 256-bit hash representing a specific reason or identifier for this payment.
     * @param paths Array of payment paths to be used for this transaction.  Must be omitted for XRP-to-XRP transactions.
     * @param sendMax (Optional) Highest amount of source currency this transaction is allowed to cost.
     */
    private constructor();
}
