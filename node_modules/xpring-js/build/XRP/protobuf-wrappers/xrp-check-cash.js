"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_currency_amount_1 = __importDefault(require("./xrp-currency-amount"));
/*
 * Represents a CheckCash transaction on the XRP Ledger.
 *
 * A CheckCash transaction attempts to redeem a Check object in the ledger to receive up to the amount
 * authorized by the corresponding CheckCreate transaction.
 *
 * @see: https://xrpl.org/checkcash.html
 */
class XrpCheckCash {
    /**
     * @param checkId The ID of the Check ledger object to cash, as a 64-character hexadecimal string.
     * @param amount (Optional) Redeem the Check for exactly this amount, if possible.
     *                The currency must match that of the SendMax of the corresponding CheckCreate transaction.
     *                You must provide either this field or deliverMin.
     * @param deliverMin (Optional) Redeem the Check for at least this amount and for as much as possible.
     *                    The currency must match that of the SendMax of the corresponding CheckCreate transaction.
     *                    You must provide either this field or amount.
     */
    constructor(checkId, amount, deliverMin) {
        this.checkId = checkId;
        this.amount = amount;
        this.deliverMin = deliverMin;
    }
    /**
     * Constructs an XrpCheckCash from a CheckCash protocol buffer.
     *
     * @param checkCash a CheckCash (protobuf object) whose field values will be used to construct an XrpCheckCash
     * @return an XrpCheckCash with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L132
     */
    static from(checkCash) {
        var _a, _b, _c;
        const checkId = (_a = checkCash.getCheckId()) === null || _a === void 0 ? void 0 : _a.getValue_asB64();
        if (!checkId) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'CheckCash protobuf is missing `checkID` field.');
        }
        const amountCurrencyAmount = (_b = checkCash.getAmount()) === null || _b === void 0 ? void 0 : _b.getValue();
        const amount = amountCurrencyAmount
            ? xrp_currency_amount_1.default.from(amountCurrencyAmount)
            : undefined;
        const deliverMinCurrencyAmount = (_c = checkCash.getDeliverMin()) === null || _c === void 0 ? void 0 : _c.getValue();
        const deliverMin = deliverMinCurrencyAmount
            ? xrp_currency_amount_1.default.from(deliverMinCurrencyAmount)
            : undefined;
        if (!deliverMin && !amount) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'CheckCash protobuf contains neither `amount` nor `deliverMin` fields.');
        }
        return new XrpCheckCash(checkId, amount, deliverMin);
    }
}
exports.default = XrpCheckCash;
//# sourceMappingURL=xrp-check-cash.js.map