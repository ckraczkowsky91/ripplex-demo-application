"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const utils_1 = require("../../Common/utils");
/*
 * Represents a memo on the XRPLedger.
 * @see: https://xrpl.org/transaction-common-fields.html#memos-field
 */
class XrpMemo {
    /**
     * @param data Arbitrary hex value, conventionally containing the content of the memo.
     * @param format Hex value representing characters allowed in URLs.  Conventionally containing
     *               information on how the memo is encoded, for example as a MIME type.
     * @param type Hex value representing characters allowed in URLs. Conventionally, a unique
     *               relation (according to RFC 5988) that defines the format of this memo.
     */
    constructor(data, format, type) {
        this.data = data;
        this.format = format;
        this.type = type;
    }
    /**
     * Constructs an XrpMemo from a Memo.
     *
     * @param memo a Memo (protobuf object) whose field values will be used
     *              to construct an XrpMemo
     * @return an XrpMemo with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/develop/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L80
     */
    static from(memo) {
        var _a, _b, _c;
        const data = (_a = memo.getMemoData()) === null || _a === void 0 ? void 0 : _a.getValue_asU8();
        const format = (_b = memo.getMemoFormat()) === null || _b === void 0 ? void 0 : _b.getValue_asU8();
        const type = (_c = memo.getMemoType()) === null || _c === void 0 ? void 0 : _c.getValue_asU8();
        if (data === undefined && format === undefined && type === undefined) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'Memo protobuf missing all fields (requires at least one field).');
        }
        return new XrpMemo(data, format, type);
    }
    /**
     * Converts strings that may or may not be hex (as indicated by the MemoField argument) into the
     * Uint8Array fields needed for an XrpMemo instance.
     *
     * @param data - a MemoField with an optional string which may or may not be converted to a hex string.
     * @param format - a MemoField with an optional string which may or may not be converted to a hex string.
     * @param type - a MemoField with an optional string which may or may not be converted to a hex string.
     * @returns an XrpMemo with each potentially hex-encoded field set to the Uint8Array version of said field.
     */
    static fromMemoFields(data, format, type) {
        const memoData = data
            ? utils_1.stringToUint8Array(data.value, data.isHex)
            : utils_1.stringToUint8Array('', false);
        const memoFormat = format
            ? utils_1.stringToUint8Array(format.value, format.isHex)
            : utils_1.stringToUint8Array('', false);
        const memoType = type
            ? utils_1.stringToUint8Array(type.value, type.isHex)
            : utils_1.stringToUint8Array('', false);
        return {
            data: memoData,
            format: memoFormat,
            type: memoType,
        };
    }
}
exports.default = XrpMemo;
//# sourceMappingURL=xrp-memo.js.map