"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const xrp_currency_amount_1 = __importDefault(require("./xrp-currency-amount"));
/*
 * Represents an OfferCreate transaction on the XRP Ledger.
 *
 * An OfferCreate transaction is effectively a limit order.
 * It defines an intent to exchange currencies, and creates
 * an Offer object if not completely fulfilled when placed.
 * Offers can be partially fulfilled.
 *
 * @see: https://xrpl.org/offercreate.html
 */
class XrpOfferCreate {
    /**
     * @param takerGets The amount and type of currency being provided by the offer creator.
     * @param takerPays The amount and type of currency being requested by the offer creator.
     * @param expiration (Optional) Time after which the offer is no longer active, in seconds since the Ripple Epoch.
     * @param offerSequence (Optional) An offer to delete first, specified in the same way as OfferCancel.
     */
    constructor(takerGets, takerPays, expiration, offerSequence) {
        this.takerGets = takerGets;
        this.takerPays = takerPays;
        this.expiration = expiration;
        this.offerSequence = offerSequence;
    }
    /**
     * Constructs an XrpOfferCreate from an OfferCreate protocol buffer.
     *
     * @param offerCreate an OfferCreate (protobuf object) whose field values will be used to construct an XrpOfferCreate
     * @return an XrpOfferCreate with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L212
     */
    static from(offerCreate) {
        var _a, _b, _c, _d;
        // takerGets and takerPays are required fields
        const takerGetsCurrencyAmount = (_a = offerCreate.getTakerGets()) === null || _a === void 0 ? void 0 : _a.getValue();
        if (!takerGetsCurrencyAmount) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'OfferCreate protobuf is missing `takerGets` field.');
        }
        const takerGets = xrp_currency_amount_1.default.from(takerGetsCurrencyAmount);
        const takerPaysCurrencyAmount = (_b = offerCreate.getTakerPays()) === null || _b === void 0 ? void 0 : _b.getValue();
        if (!takerPaysCurrencyAmount) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'OfferCreate protobuf is missing `takerPays` field.');
        }
        const takerPays = xrp_currency_amount_1.default.from(takerPaysCurrencyAmount);
        const expiration = (_c = offerCreate.getExpiration()) === null || _c === void 0 ? void 0 : _c.getValue();
        const offerSequence = (_d = offerCreate.getOfferSequence()) === null || _d === void 0 ? void 0 : _d.getValue();
        return new XrpOfferCreate(takerGets, takerPays, expiration, offerSequence);
    }
}
exports.default = XrpOfferCreate;
//# sourceMappingURL=xrp-offer-create.js.map