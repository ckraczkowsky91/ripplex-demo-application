"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
/*
 * Represents an OfferCancel transaction on the XRP Ledger.
 *
 * An OfferCancel transaction removes an Offer object from the XRP Ledger.
 *
 * @see: https://xrpl.org/offercancel.html
 */
class XrpOfferCancel {
    /**
     * @param offerSequence The sequence number of a previous OfferCreate transaction. If specified,
     *                      cancel any offer object in the ledger that was created by that transaction.
     *                      It is not considered an error if the offer specified does not exist.
     */
    constructor(offerSequence) {
        this.offerSequence = offerSequence;
    }
    /**
     * Constructs an XrpOfferCancel from an OfferCancel protocol buffer.
     *
     * @param offerCancel an OfferCancel (protobuf object) whose field values will be used to construct an XrpOfferCancel
     * @return an XrpOfferCancel with its fields set via the analogous protobuf fields.
     * @see https://github.com/ripple/rippled/blob/3d86b49dae8173344b39deb75e53170a9b6c5284/src/ripple/proto/org/xrpl/rpc/v1/transaction.proto#L206
     */
    static from(offerCancel) {
        var _a;
        const offerSequence = (_a = offerCancel.getOfferSequence()) === null || _a === void 0 ? void 0 : _a.getValue();
        if (!offerSequence) {
            throw new __1.XrpError(__1.XrpErrorType.MalformedProtobuf, 'OfferCancel protobuf is missing `offerSequence` field.');
        }
        return new XrpOfferCancel(offerSequence);
    }
}
exports.default = XrpOfferCancel;
//# sourceMappingURL=xrp-offer-cancel.js.map