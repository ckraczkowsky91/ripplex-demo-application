"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const bignumber_js_1 = require("bignumber.js");
const xrp_error_1 = __importStar(require("./xrp-error"));
const xpring_common_js_1 = require("xpring-common-js");
function dropsToXrp(drops) {
    const dropsRegEx = RegExp(/^-?[0-9]*\.?[0-9]*$/);
    if (typeof drops === 'string') {
        if (!dropsRegEx.exec(drops)) {
            throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `dropsToXrp: invalid value '${drops}',` +
                ` should be a number matching (^-?[0-9]*\\.?[0-9]*$).`);
        }
        else if (drops === '.') {
            throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `dropsToXrp: invalid value '${drops}',` +
                ` should be a BigNumber or string-encoded number.`);
        }
    }
    // Converting to BigNumber and then back to string should remove any
    // decimal point followed by zeros, e.g. '1.00'.
    // Important: specify base 10 to avoid exponential notation, e.g. '1e-7'.
    // eslint-disable-next-line no-param-reassign
    drops = new bignumber_js_1.BigNumber(drops).toString(10);
    // drops are only whole units
    if (drops.includes('.')) {
        throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `dropsToXrp: value '${drops}' has too many decimal places.`);
    }
    // This should never happen; the value has already been
    // validated above. This just ensures BigNumber did not do
    // something unexpected.
    if (!dropsRegEx.exec(drops)) {
        throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `dropsToXrp: failed sanity check -` +
            ` value '${drops}',` +
            ` does not match (^-?[0-9]+$).`);
    }
    return new bignumber_js_1.BigNumber(drops).dividedBy(1000000.0).toString(10);
}
function xrpToDrops(xrp) {
    const xrpRegEx = RegExp(/^-?[0-9]*\.?[0-9]*$/);
    if (typeof xrp === 'string') {
        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
        if (!xrpRegEx.exec(xrp)) {
            throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `xrpToDrops: invalid value '${xrp}',` +
                ` should be a number matching (^-?[0-9]*\\.?[0-9]*$).`);
        }
        else if (xrp === '.') {
            throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `xrpToDrops: invalid value '${xrp}',` +
                ` should be a BigNumber or string-encoded number.`);
        }
    }
    // Important: specify base 10 to avoid exponential notation, e.g. '1e-7'.
    // eslint-disable-next-line no-param-reassign
    xrp = new bignumber_js_1.BigNumber(xrp).toString(10);
    // This should never happen; the value has already been
    // validated above. This just ensures BigNumber did not do
    // something unexpected.
    if (!xrpRegEx.exec(xrp)) {
        throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `xrpToDrops: failed sanity check -` +
            ` value '${xrp}',` +
            ` does not match (^-?[0-9.]+$).`);
    }
    const components = xrp.split('.');
    if (components.length > 2) {
        throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `xrpToDrops: failed sanity check -` +
            ` value '${xrp}' has` +
            ` too many decimal points.`);
    }
    const fraction = components[1] || '0';
    if (fraction.length > 6) {
        throw new xrp_error_1.default(xrp_error_1.XrpErrorType.InvalidInput, `xrpToDrops: value '${xrp}' has too many decimal places.`);
    }
    return new bignumber_js_1.BigNumber(xrp)
        .times(1000000.0)
        .integerValue(bignumber_js_1.BigNumber.ROUND_FLOOR)
        .toString(10);
}
function isString(value) {
    return typeof value === 'string';
}
/**
 * A type guard for the IssuedCurrency interface.
 *
 * @param object The object to check for conformance to the IssuedCurrency interface.
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function isIssuedCurrency(object) {
    if (!isString(object)) {
        return 'currency' in object && 'issuer' in object && 'value' in object;
    }
    return false;
}
exports.default = Object.assign({ dropsToXrp,
    xrpToDrops,
    isString,
    isIssuedCurrency }, xpring_common_js_1.XrpUtils);
//# sourceMappingURL=xrp-utils.js.map