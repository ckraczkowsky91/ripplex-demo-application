"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const payment_flags_1 = __importDefault(require("./payment-flags"));
const _1 = require(".");
/** Abstraction around raw Transaction Status for compatibility. */
// TODO:(keefertaylor) This class is now defunct. Refactor and remove.
class RawTransactionStatus {
    /**
     * Note: This constructor is exposed for testing purposes. Clients of this code should favor using a static factory method.
     */
    constructor(isValidated, transactionStatusCode, lastLedgerSequence, isFullPayment) {
        this.isValidated = isValidated;
        this.transactionStatusCode = transactionStatusCode;
        this.lastLedgerSequence = lastLedgerSequence;
        this.isFullPayment = isFullPayment;
    }
    /**
     * Create a RawTransactionStatus from a GetTransactionResponse protocol buffer.
     */
    static fromGetTransactionResponse(getTransactionResponse) {
        var _a, _b, _c, _d, _e, _f;
        const transaction = getTransactionResponse.getTransaction();
        if (!transaction) {
            throw new _1.XrpError(_1.XrpErrorType.MalformedResponse, 'Malformed input, `getTxResponse` did not contain a transaction.');
        }
        const transactionResultCode = (_b = (_a = getTransactionResponse
            .getMeta()) === null || _a === void 0 ? void 0 : _a.getTransactionResult()) === null || _b === void 0 ? void 0 : _b.getResult();
        if (!transactionResultCode) {
            throw new _1.XrpError(_1.XrpErrorType.MalformedResponse, 'Malformed input, `getTxResponse` did not contain a transaction result code.');
        }
        const isPayment = transaction.hasPayment();
        const flags = (_d = (_c = transaction.getFlags()) === null || _c === void 0 ? void 0 : _c.getValue()) !== null && _d !== void 0 ? _d : 0;
        const isPartialPayment = payment_flags_1.default.checkFlag(payment_flags_1.default.TF_PARTIAL_PAYMENT, flags);
        const isFullPayment = isPayment && !isPartialPayment;
        return new RawTransactionStatus(getTransactionResponse.getValidated(), transactionResultCode, (_f = (_e = getTransactionResponse
            .getTransaction()) === null || _e === void 0 ? void 0 : _e.getLastLedgerSequence()) === null || _f === void 0 ? void 0 : _f.getValue(), isFullPayment);
    }
}
exports.default = RawTransactionStatus;
//# sourceMappingURL=raw-transaction-status.js.map