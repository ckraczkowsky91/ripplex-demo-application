/**
 * Types of errors that originate from interacting with XRPL.
 */
export declare enum XrpErrorType {
    InvalidInput = 0,
    PaymentConversionFailure = 1,
    MalformedProtobuf = 2,
    MalformedResponse = 3,
    AccountNotFound = 4,
    SigningError = 5,
    Unknown = 6,
    XAddressRequired = 7,
    NoViablePaths = 8
}
/**
 * Represents errors thrown by XRP components of the Xpring SDK.
 */
export default class XrpError extends Error {
    readonly errorType: XrpErrorType;
    /**
     * An X-Address is required to use the requested functionality.
     */
    static xAddressRequired: XrpError;
    /**
     * A payment transaction can't be converted to an XrpTransaction.
     */
    static paymentConversionFailure: XrpError;
    /**
     * Encountered a protocol buffer formatted in contradiction to the logic of the XRPL.
     * @see xrpl.org for XRPL documentation.
     */
    static malformedProtobuf: XrpError;
    /**
     * The response was in an unexpected format.
     */
    static malformedResponse: XrpError;
    /**
     * The account could not be found on the XRPL.
     */
    static accountNotFound: XrpError;
    /**
     * There was a problem signing the transaction.
     */
    static signingError: XrpError;
    /**
     * @param errorType The type of error.
     * @param message The error message.
     */
    constructor(errorType: XrpErrorType, message?: string | undefined);
}
