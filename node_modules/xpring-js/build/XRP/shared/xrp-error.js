"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrpErrorType = void 0;
/**
 * Types of errors that originate from interacting with XRPL.
 */
var XrpErrorType;
(function (XrpErrorType) {
    XrpErrorType[XrpErrorType["InvalidInput"] = 0] = "InvalidInput";
    XrpErrorType[XrpErrorType["PaymentConversionFailure"] = 1] = "PaymentConversionFailure";
    XrpErrorType[XrpErrorType["MalformedProtobuf"] = 2] = "MalformedProtobuf";
    XrpErrorType[XrpErrorType["MalformedResponse"] = 3] = "MalformedResponse";
    XrpErrorType[XrpErrorType["AccountNotFound"] = 4] = "AccountNotFound";
    XrpErrorType[XrpErrorType["SigningError"] = 5] = "SigningError";
    XrpErrorType[XrpErrorType["Unknown"] = 6] = "Unknown";
    XrpErrorType[XrpErrorType["XAddressRequired"] = 7] = "XAddressRequired";
    XrpErrorType[XrpErrorType["NoViablePaths"] = 8] = "NoViablePaths";
})(XrpErrorType = exports.XrpErrorType || (exports.XrpErrorType = {}));
/**
 * Represents errors thrown by XRP components of the Xpring SDK.
 */
class XrpError extends Error {
    /**
     * @param errorType The type of error.
     * @param message The error message.
     */
    constructor(errorType, message = undefined) {
        super(message);
        this.errorType = errorType;
    }
}
exports.default = XrpError;
/**
 * An X-Address is required to use the requested functionality.
 */
XrpError.xAddressRequired = new XrpError(XrpErrorType.XAddressRequired, 'Please use the X-Address format. See: https://xrpaddress.info/.');
/**
 * A payment transaction can't be converted to an XrpTransaction.
 */
XrpError.paymentConversionFailure = new XrpError(XrpErrorType.PaymentConversionFailure, 'Could not convert payment transaction: (transaction). Please file a bug at https://github.com/xpring-eng/Xpring-JS/issues.');
/**
 * Encountered a protocol buffer formatted in contradiction to the logic of the XRPL.
 * @see xrpl.org for XRPL documentation.
 */
XrpError.malformedProtobuf = new XrpError(XrpErrorType.MalformedProtobuf, 'Encountered a protocol buffer in unexpected format.  See xrpl.org for XRPL documentation.');
/**
 * The response was in an unexpected format.
 */
XrpError.malformedResponse = new XrpError(XrpErrorType.MalformedResponse, 'The response from the remote service was malformed or in an unexpected format.');
/**
 * The account could not be found on the XRPL.
 */
XrpError.accountNotFound = new XrpError(XrpErrorType.AccountNotFound, 'The requested account could not be found on the XRPL.');
/**
 * There was a problem signing the transaction.
 */
XrpError.signingError = new XrpError(XrpErrorType.SigningError, 'There was an error signing the transaction.');
//# sourceMappingURL=xrp-error.js.map