"use strict";
/* Schema for adding type information to WebSocket objects. */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseStatus = exports.RippledMethod = exports.WebSocketReadyState = void 0;
/**
 * The options for the `readyState` of a websocket.
 */
var WebSocketReadyState;
(function (WebSocketReadyState) {
    WebSocketReadyState[WebSocketReadyState["Connecting"] = 0] = "Connecting";
    WebSocketReadyState[WebSocketReadyState["Open"] = 1] = "Open";
    WebSocketReadyState[WebSocketReadyState["Closing"] = 2] = "Closing";
    WebSocketReadyState[WebSocketReadyState["Closed"] = 3] = "Closed";
})(WebSocketReadyState || (WebSocketReadyState = {}));
exports.WebSocketReadyState = WebSocketReadyState;
/**
 * The options for rippled methods (the `command` parameter in WebSocketRequestOptions)
 *
 * This is currently only the supported operations, but more will be added as they are supported.
 * @see https://xrpl.org/public-rippled-methods.html
 */
var RippledMethod;
(function (RippledMethod) {
    RippledMethod["subscribe"] = "subscribe";
    RippledMethod["unsubscribe"] = "unsubscribe";
    RippledMethod["accountLines"] = "account_lines";
    RippledMethod["gatewayBalances"] = "gateway_balances";
    RippledMethod["accountOffers"] = "account_offers";
    RippledMethod["ripplePathFind"] = "ripple_path_find";
})(RippledMethod || (RippledMethod = {}));
exports.RippledMethod = RippledMethod;
var ResponseStatus;
(function (ResponseStatus) {
    ResponseStatus["success"] = "success";
    ResponseStatus["error"] = "error";
})(ResponseStatus || (ResponseStatus = {}));
exports.ResponseStatus = ResponseStatus;
//# sourceMappingURL=rippled-web-socket-schema.js.map