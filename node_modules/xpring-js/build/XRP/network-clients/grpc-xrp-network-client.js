"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const get_account_info_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/get_account_info_pb");
const get_fee_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/get_fee_pb");
const submit_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/submit_pb");
const XRPLedgerGrpcPb = __importStar(require("../Generated/node/org/xrpl/rpc/v1/xrp_ledger_grpc_pb"));
const account_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/account_pb");
const get_account_transaction_history_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/get_account_transaction_history_pb");
const get_transaction_pb_1 = require("../Generated/node/org/xrpl/rpc/v1/get_transaction_pb");
const utils_1 = __importDefault(require("../../Common/utils"));
/**
 * A GRPC Based network client.
 */
class GrpcXrpNetworkClient {
    constructor(grpcURL) {
        if (!utils_1.default())
            throw new Error('Use gRPC-Web Network Client on the browser!');
        const XRPLedgerAPIServiceClient = grpc.makeClientConstructor(XRPLedgerGrpcPb['org.xrpl.rpc.v1.XRPLedgerAPIService'], 'XRPLedgerAPIService');
        this.grpcClient = new XRPLedgerAPIServiceClient(grpcURL, grpc.credentials.createInsecure());
    }
    async getAccountInfo(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getAccountInfo(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async getFee(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getFee(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async getTransaction(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getTransaction(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async submitTransaction(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.submitTransaction(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    async getTransactionHistory(request) {
        return new Promise((resolve, reject) => {
            this.grpcClient.getAccountTransactionHistory(request, (error, response) => {
                if (error != null || response == null) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    /* eslint-disable class-methods-use-this */
    AccountAddress() {
        return new account_pb_1.AccountAddress();
    }
    GetAccountInfoRequest() {
        return new get_account_info_pb_1.GetAccountInfoRequest();
    }
    GetTransactionRequest() {
        return new get_transaction_pb_1.GetTransactionRequest();
    }
    GetFeeRequest() {
        return new get_fee_pb_1.GetFeeRequest();
    }
    SubmitTransactionRequest() {
        return new submit_pb_1.SubmitTransactionRequest();
    }
    GetAccountTransactionHistoryRequest() {
        return new get_account_transaction_history_pb_1.GetAccountTransactionHistoryRequest();
    }
}
exports.default = GrpcXrpNetworkClient;
//# sourceMappingURL=grpc-xrp-network-client.js.map