import { Wallet, XrplNetwork } from 'xpring-common-js';
import { BigInteger } from 'big-integer';
import XrpClientDecorator from './xrp-client-decorator';
import TransactionStatus from './shared/transaction-status';
import XrpTransaction from './protobuf-wrappers/xrp-transaction';
import SendXrpDetails from './shared/send-xrp-details';
import TransactionResult from './shared/transaction-result';
import CoreXrplClientInterface from './core-xrpl-client-interface';
/**
 * An XrpClient which blocks on `send` calls until the transaction has reached a deterministic state.
 */
export default class ReliableSubmissionXrpClient implements XrpClientDecorator {
    private readonly decoratedClient;
    private readonly coreXrplClient;
    readonly network: XrplNetwork;
    /**
     * A constructor for direct client injection, primarily for testing.
     *
     * @param decoratedClient The XrpClient being decorated by this ReliableSubmissionClient.
     * @param coreXrplClient The instance of CoreXrplClient available to this ReliableSubmissionClient.
     * @param network The network this XrpClient is connecting to.
     */
    constructor(decoratedClient: XrpClientDecorator, coreXrplClient: CoreXrplClientInterface, network: XrplNetwork);
    /**
     * Create a new ReliableSubmissionXrpClient.
     *
     * The ReliableSubmissionXrpClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcUrl The URL of the gRPC instance to connect to.
     * @param network The network this XrpClient is connecting to.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false. This is mainly for testing and in the future will be removed when we have browser testing.
     */
    static reliableSubmissionXrpClientWithEndpoint(grpcUrl: string, network: XrplNetwork, forceWeb?: boolean): ReliableSubmissionXrpClient;
    getBalance(address: string): Promise<BigInteger>;
    getPaymentStatus(transactionHash: string): Promise<TransactionStatus>;
    sendXrp(amount: string | number | BigInteger, destination: string, sender: Wallet): Promise<TransactionResult>;
    sendXrpWithDetails(sendXrpDetails: SendXrpDetails): Promise<TransactionResult>;
    accountExists(address: string): Promise<boolean>;
    paymentHistory(address: string): Promise<Array<XrpTransaction>>;
    getPayment(transactionHash: string): Promise<XrpTransaction>;
    enableDepositAuth(wallet: Wallet): Promise<TransactionResult>;
    authorizeSendingAccount(xAddressToAuthorize: string, wallet: Wallet): Promise<TransactionResult>;
    unauthorizeSendingAccount(xAddressToUnauthorize: string, wallet: Wallet): Promise<TransactionResult>;
}
