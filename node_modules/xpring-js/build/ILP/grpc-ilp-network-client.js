"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const get_balance_request_pb_1 = require("./Generated/node/get_balance_request_pb");
const send_payment_request_pb_1 = require("./Generated/node/send_payment_request_pb");
const BalanceGrpcPb = __importStar(require("./Generated/node/balance_service_grpc_pb"));
const ILPGrpcPb = __importStar(require("./Generated/node/ilp_over_http_service_grpc_pb"));
const ilp_credentials_1 = __importDefault(require("./auth/ilp-credentials"));
const utils_1 = __importDefault(require("../Common/utils"));
class GrpcIlpNetworkClient {
    constructor(grpcURL) {
        if (!utils_1.default())
            throw new Error('Use ILP-gRPC-Web Network Client on the browser!');
        const BalanceServiceClient = grpc.makeClientConstructor(BalanceGrpcPb['org.interledger.stream.proto.BalanceService'], 'BalanceService');
        this.balanceClient = new BalanceServiceClient(grpcURL, grpc.credentials.createSsl());
        const IlpOverHttpServiceClient = grpc.makeClientConstructor(ILPGrpcPb['org.interledger.stream.proto.IlpOverHttpService'], 'IlpOverHttpService');
        this.paymentClient = new IlpOverHttpServiceClient(grpcURL, grpc.credentials.createSsl());
    }
    getBalance(request, accessToken) {
        return new Promise((resolve, reject) => {
            this.balanceClient.getBalance(request, ilp_credentials_1.default.build(accessToken), (error, response) => {
                if (error || !response) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    send(request, accessToken) {
        return new Promise((resolve, reject) => {
            this.paymentClient.sendMoney(request, ilp_credentials_1.default.build(accessToken), (error, response) => {
                if (error || !response) {
                    reject(error);
                    return;
                }
                resolve(response);
            });
        });
    }
    /* eslint-disable class-methods-use-this */
    SendPaymentRequest() {
        return new send_payment_request_pb_1.SendPaymentRequest();
    }
    GetBalanceRequest() {
        return new get_balance_request_pb_1.GetBalanceRequest();
    }
}
exports.default = GrpcIlpNetworkClient;
//# sourceMappingURL=grpc-ilp-network-client.js.map