"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __importDefault(require("../Common/utils"));
const grpc_ilp_network_client_1 = __importDefault(require("./grpc-ilp-network-client"));
const grpc_ilp_network_client_web_1 = __importDefault(require("./grpc-ilp-network-client.web"));
const account_balance_1 = require("./model/account-balance");
const payment_result_1 = require("./model/payment-result");
const ilp_error_1 = __importDefault(require("./ilp-error"));
class DefaultIlpClient {
    /**
     * This constructor is meant solely for testing purposes. Users should prefer
     * DefaultIlpclient.defaultIlpClientWithEndpoint instead.
     *
     * @param networkClient A {@link IlpNetworkClient} which can make network calls to ILP infrastructure
     */
    constructor(networkClient) {
        this.networkClient = networkClient;
    }
    /**
     * Create a new DefaultIlpClient.
     *
     * The DefaultIlpClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcURL The URL of the gRPC instance to connect to.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false.
     * This is mainly for testing and in the future will be removed when we have browser testing.
     */
    static defaultIlpClientWithEndpoint(grpcURL, forceWeb = false) {
        return utils_1.default() && !forceWeb
            ? new DefaultIlpClient(new grpc_ilp_network_client_1.default(grpcURL))
            : new DefaultIlpClient(new grpc_ilp_network_client_web_1.default(grpcURL));
    }
    /**
     * Get the balance of the specified account on the connector.
     *
     * @param accountId The account ID to get the balance for.
     * @param accessToken Optional access token. If using node network client, accessToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @return A Promise<AccountBalance> with balance information of the specified account
     * @throws an IlpError if the inputs were invalid or an error occurs during the call.
     */
    async getBalance(accountId, accessToken) {
        const request = this.networkClient.GetBalanceRequest();
        request.setAccountId(accountId);
        return this.networkClient
            .getBalance(request, accessToken)
            .catch((error) => {
            throw ilp_error_1.default.from(error);
        })
            .then((response) => account_balance_1.AccountBalance.from(response));
    }
    /**
     * Send a payment from the given accountId to the destinationPaymentPointer payment pointer
     *
     * @param paymentRequest A PaymentRequest with options for sending a payment
     * @param accessToken Optional access token. If using node network client, accessToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @returns A promise which resolves to a `PaymentResult` of the original amount, the amount sent
     *        in the senders denomination, and the amount that was delivered to the recipient in their denomination, as
     *        well as if the payment was successful
     * @throws an IlpError if the inputs were invalid or an error occurs during the call.
     */
    async sendPayment(paymentRequest, accessToken) {
        const request = this.networkClient.SendPaymentRequest();
        request.setAmount(paymentRequest.amount.toJSNumber());
        request.setDestinationPaymentPointer(paymentRequest.destinationPaymentPointer);
        request.setAccountId(paymentRequest.senderAccountId);
        return this.networkClient
            .send(request, accessToken)
            .catch((error) => {
            throw ilp_error_1.default.from(error);
        })
            .then((response) => payment_result_1.PaymentResult.from(response));
    }
}
exports.default = DefaultIlpClient;
//# sourceMappingURL=default-ilp-client.js.map