"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IlpErrorType = void 0;
const grpc_web_1 = require("grpc-web");
/**
 * Types of errors that originate from ILP.
 */
var IlpErrorType;
(function (IlpErrorType) {
    IlpErrorType[IlpErrorType["AccountNotFound"] = 0] = "AccountNotFound";
    IlpErrorType[IlpErrorType["Internal"] = 1] = "Internal";
    IlpErrorType[IlpErrorType["InvalidAccessToken"] = 2] = "InvalidAccessToken";
    IlpErrorType[IlpErrorType["InvalidArgument"] = 3] = "InvalidArgument";
    IlpErrorType[IlpErrorType["Unauthenticated"] = 4] = "Unauthenticated";
    IlpErrorType[IlpErrorType["Unknown"] = 5] = "Unknown";
})(IlpErrorType = exports.IlpErrorType || (exports.IlpErrorType = {}));
/**
 * Represents errors thrown by ILP components of the Xpring SDK.
 */
class IlpError extends Error {
    /**
     * Public constructor.
     *
     * @param errorType The type of error.
     * @param message The error message.
     */
    constructor(errorType, message = undefined) {
        super(message);
        this.errorType = errorType;
    }
    /**
     * Handle an Error thrown from an Ilp network client call by translating it to
     * a IlpError.
     *
     * gRPC services follow return an error with a status code, so we need to map gRPC error status
     * to native IlpErrors.  GrpcNetworkClient and GrpcNetworkClientWeb also sometimes throw
     * a IlpError, so we need to handle that case in here as well.
     *
     * @param error Any error returned by a network call.
     * @return A {@link IlpError} that has been translated from a gRPC error, or which should be rethrown
     */
    static from(error) {
        if ('code' in error) {
            switch (error.code) {
                case grpc_web_1.StatusCode.NOT_FOUND:
                    return IlpError.accountNotFound;
                case grpc_web_1.StatusCode.UNAUTHENTICATED:
                    return IlpError.unauthenticated;
                case grpc_web_1.StatusCode.INVALID_ARGUMENT:
                    return IlpError.invalidArgument;
                case grpc_web_1.StatusCode.INTERNAL:
                    return IlpError.internal;
                default:
                    return IlpError.unknown;
            }
        }
        return error;
    }
}
exports.default = IlpError;
/**
 * Default errors.
 */
IlpError.accountNotFound = new IlpError(IlpErrorType.AccountNotFound, 'Account not found.');
IlpError.internal = new IlpError(IlpErrorType.Internal, 'Internal error occurred on ILP network.');
IlpError.invalidAccessToken = new IlpError(IlpErrorType.InvalidAccessToken, 'Access token should not start with "Bearer "');
IlpError.invalidArgument = new IlpError(IlpErrorType.InvalidArgument, 'Invalid argument in request body.');
IlpError.unauthenticated = new IlpError(IlpErrorType.Unauthenticated, 'Authentication failed.');
IlpError.unknown = new IlpError(IlpErrorType.Unknown, 'Unknown error occurred.');
//# sourceMappingURL=ilp-error.js.map