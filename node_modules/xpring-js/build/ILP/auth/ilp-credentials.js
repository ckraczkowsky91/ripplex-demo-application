"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_js_1 = require("@grpc/grpc-js");
const ilp_error_1 = __importDefault(require("../ilp-error"));
/**
 * An extension of grpc.Metadata which provides a convenient way to
 * add an Authorization metadata header, and ensures every bearer token
 * going over the wire is prefixed with 'Bearer '
 */
class IlpCredentials extends grpc_js_1.Metadata {
    /**
     * Static initializer, which constructs a new IlpCredentials object and adds
     * an Authorization entry.  If token is undefined, an Authorization header will
     * still be added, but the call will ultimately fail as Unauthorized
     *
     * @param token an optional access token to be added to IlpCredentials
     * @return a new instance of IlpCredentials, with an Authorization header
     */
    static build(token) {
        if (token && token.startsWith(this.BEARER_PREFIX)) {
            throw ilp_error_1.default.invalidAccessToken;
        }
        const credentials = new IlpCredentials();
        credentials.add('Authorization', this.BEARER_PREFIX.concat(token || ''));
        return credentials;
    }
}
IlpCredentials.BEARER_PREFIX = 'Bearer ';
exports.default = IlpCredentials;
//# sourceMappingURL=ilp-credentials.js.map