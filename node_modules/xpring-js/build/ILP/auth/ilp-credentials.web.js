"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ilp_error_1 = __importDefault(require("../ilp-error"));
/**
 * An extension of grpc-web.Metadata which provides a convenient way to
 * add an Authorization metadata header, and ensures every bearer token
 * going over the wire is prefixed with 'Bearer '
 */
class IlpCredentials {
    /**
     * Static initializer, which constructs a new IlpCredentials object and adds
     * an Authorization entry.  If token is undefined, this builder will return
     * undefined, so no metadata will be passed to a network call. This allows applications
     * in the browser to rely on HTTP cookies to provide authentication.
     *
     * @param token an optional bearer token to be added to IlpCredentials
     * @return a new instance of IlpCredentials, with an Authorization header if token is defined,
     *          otherwise returns undefined
     */
    static build(token) {
        if (token && token.startsWith(this.BEARER_PREFIX)) {
            throw ilp_error_1.default.invalidAccessToken;
        }
        return token
            ? { Authorization: this.BEARER_PREFIX.concat(token) }
            : undefined;
    }
}
IlpCredentials.BEARER_PREFIX = 'Bearer ';
exports.default = IlpCredentials;
//# sourceMappingURL=ilp-credentials.web.js.map