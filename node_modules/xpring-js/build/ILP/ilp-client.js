"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const default_ilp_client_1 = __importDefault(require("./default-ilp-client"));
class IlpClient {
    constructor(grpcURL, forceWeb = false) {
        this.decoratedClient = default_ilp_client_1.default.defaultIlpClientWithEndpoint(grpcURL, forceWeb);
    }
    /**
     * Get the balance of the specified account on the connector.
     *
     * @param accountId The account ID to get the balance for.
     * @param accessToken Optional access token. If using node network client, accessToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @return A Promise<AccountBalance> with balance information of the specified account
     * @throws an IlpError if the inputs were invalid or an error occurs during the call.
     */
    async getBalance(accountId, accessToken) {
        return this.decoratedClient.getBalance(accountId, accessToken);
    }
    /**
     * Send a payment from the given accountId to the destinationPaymentPointer payment pointer
     *
     * @param paymentRequest A PaymentRequest with options for sending a payment
     * @param accessToken Optional access token. If using node network client, accessToken must be supplied, otherwise
     *        it will be picked up from a cookie.
     * @returns A promise which resolves to a `PaymentResult` of the original amount, the amount sent
     *        in the senders denomination, and the amount that was delivered to the recipient in their denomination, as
     *        well as if the payment was successful
     * @throws an IlpError if the inputs were invalid or an error occurs during the call.
     */
    async sendPayment(paymentRequest, accessToken) {
        return this.decoratedClient.sendPayment(paymentRequest, accessToken);
    }
}
exports.default = IlpClient;
//# sourceMappingURL=ilp-client.js.map