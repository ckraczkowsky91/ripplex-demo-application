"use strict";
// tslint:disable
/**
 * PayID
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const globalImportUrl = __importStar(require("url"));
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
exports.DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary get-invoice
         * @param {string} nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPathInvoice: async (nonce, options = {}) => {
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new base_1.RequiredError('nonce', 'Required parameter nonce was null or undefined when calling getPathInvoice.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary post-invoice
         * @param {string} nonce
         * @param {SignatureWrapperCompliance} [signatureWrapperCompliance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPathInvoice: async (nonce, signatureWrapperCompliance, options = {}) => {
            // verify required parameter 'nonce' is not null or undefined
            if (nonce === null || nonce === undefined) {
                throw new base_1.RequiredError('nonce', 'Required parameter nonce was null or undefined when calling postPathInvoice.');
            }
            const localVarPath = `/invoice`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof signatureWrapperCompliance !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(signatureWrapperCompliance !== undefined ? signatureWrapperCompliance : {}) : (signatureWrapperCompliance || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {Receipt} [receipt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPathReceipt: async (receipt, options = {}) => {
            const localVarPath = `/receipt`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = (typeof receipt !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(receipt !== undefined ? receipt : {}) : (receipt || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolve a pay id
         * @summary get-pay-id
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolvePayID: async (path, options = {}) => {
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new base_1.RequiredError('path', 'Required parameter path was null or undefined when calling resolvePayID.');
            }
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign(Object.assign(Object.assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
exports.DefaultApiFp = function (configuration) {
    return {
        /**
         *
         * @summary get-invoice
         * @param {string} nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPathInvoice(nonce, options) {
            const localVarAxiosArgs = await exports.DefaultApiAxiosParamCreator(configuration).getPathInvoice(nonce, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary post-invoice
         * @param {string} nonce
         * @param {SignatureWrapperCompliance} [signatureWrapperCompliance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPathInvoice(nonce, signatureWrapperCompliance, options) {
            const localVarAxiosArgs = await exports.DefaultApiAxiosParamCreator(configuration).postPathInvoice(nonce, signatureWrapperCompliance, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {Receipt} [receipt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPathReceipt(receipt, options) {
            const localVarAxiosArgs = await exports.DefaultApiAxiosParamCreator(configuration).postPathReceipt(receipt, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Resolve a pay id
         * @summary get-pay-id
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolvePayID(path, options) {
            const localVarAxiosArgs = await exports.DefaultApiAxiosParamCreator(configuration).resolvePayID(path, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = Object.assign(Object.assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
exports.DefaultApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary get-invoice
         * @param {string} nonce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPathInvoice(nonce, options) {
            return exports.DefaultApiFp(configuration).getPathInvoice(nonce, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary post-invoice
         * @param {string} nonce
         * @param {SignatureWrapperCompliance} [signatureWrapperCompliance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPathInvoice(nonce, signatureWrapperCompliance, options) {
            return exports.DefaultApiFp(configuration).postPathInvoice(nonce, signatureWrapperCompliance, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Receipt} [receipt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPathReceipt(receipt, options) {
            return exports.DefaultApiFp(configuration).postPathReceipt(receipt, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolve a pay id
         * @summary get-pay-id
         * @param {string} path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolvePayID(path, options) {
            return exports.DefaultApiFp(configuration).resolvePayID(path, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary get-invoice
     * @param {string} nonce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPathInvoice(nonce, options) {
        return exports.DefaultApiFp(this.configuration).getPathInvoice(nonce, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary post-invoice
     * @param {string} nonce
     * @param {SignatureWrapperCompliance} [signatureWrapperCompliance]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postPathInvoice(nonce, signatureWrapperCompliance, options) {
        return exports.DefaultApiFp(this.configuration).postPathInvoice(nonce, signatureWrapperCompliance, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Receipt} [receipt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    postPathReceipt(receipt, options) {
        return exports.DefaultApiFp(this.configuration).postPathReceipt(receipt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resolve a pay id
     * @summary get-pay-id
     * @param {string} path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    resolvePayID(path, options) {
        return exports.DefaultApiFp(this.configuration).resolvePayID(path, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=api.js.map