"use strict";
/* eslint-disable max-classes-per-file */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const xpring_common_js_1 = require("xpring-common-js");
const xrp_utils_1 = __importDefault(require("../XRP/shared/xrp-utils"));
const pay_id_client_1 = __importDefault(require("./pay-id-client"));
const pay_id_error_1 = __importStar(require("./pay-id-error"));
/**
 * Provides functionality for XRP in the PayID protocol.
 */
class XrpPayIdClient extends pay_id_client_1.default {
    /**
     * @param xrplNetwork The XRP Ledger network that this client attaches to.
     * @param useHttps Whether to use HTTPS when making PayID requests. Most users should set this to 'true' to avoid
     *                 Man-in-the-Middle attacks. Exposed as an option for testing purposes. Defaults to true.
     */
    constructor(xrplNetwork, useHttps = true) {
        super(useHttps);
        this.xrplNetwork = xrplNetwork;
    }
    /**
     * Retrieve the XRP address associated with a PayID.
     *
     * Note: Addresses are always in the X-Address format.
     * @see https://xrpaddress.info/
     *
     * @param payId The PayID to resolve for an address.
     * @returns An XRP address representing the given PayID.
     */
    async xrpAddressForPayId(payId) {
        const result = await super.cryptoAddressForPayId(payId, `xrpl-${this.xrplNetwork}`);
        const { address } = result;
        if (xrp_utils_1.default.isValidXAddress(address)) {
            return address;
        }
        const isTest = this.xrplNetwork !== xpring_common_js_1.XrplNetwork.Main;
        const tag = result.tag ? Number(result.tag) : undefined;
        // Ensure if there was a tag attached that it could be parsed to a number.
        if (result.tag && tag === undefined) {
            throw new pay_id_error_1.default(pay_id_error_1.PayIdErrorType.UnexpectedResponse, 'The returned tag was in an unexpected format');
        }
        const encodedXAddress = xrp_utils_1.default.encodeXAddress(address, tag, isTest);
        if (!encodedXAddress) {
            throw new pay_id_error_1.default(pay_id_error_1.PayIdErrorType.UnexpectedResponse, 'The returned address was in an unexpected format');
        }
        return encodedXAddress;
    }
}
exports.default = XrpPayIdClient;
//# sourceMappingURL=xrp-pay-id-client.js.map