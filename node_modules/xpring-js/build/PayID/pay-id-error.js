"use strict";
/* eslint-disable max-classes-per-file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayIdErrorType = void 0;
/**
 * Types of errors that originate from PayID.
 */
var PayIdErrorType;
(function (PayIdErrorType) {
    PayIdErrorType[PayIdErrorType["InvalidPayId"] = 0] = "InvalidPayId";
    PayIdErrorType[PayIdErrorType["MappingNotFound"] = 1] = "MappingNotFound";
    PayIdErrorType[PayIdErrorType["UnexpectedResponse"] = 2] = "UnexpectedResponse";
    PayIdErrorType[PayIdErrorType["Unimplemented"] = 3] = "Unimplemented";
    PayIdErrorType[PayIdErrorType["Unknown"] = 4] = "Unknown";
})(PayIdErrorType = exports.PayIdErrorType || (exports.PayIdErrorType = {}));
/**
 * Represents errors thrown by PayID components of the Xpring SDK.
 */
class PayIdError extends Error {
    /**
     * @param errorType The type of error.
     * @param message The error message.
     */
    constructor(errorType, message = undefined) {
        super(message);
        this.errorType = errorType;
    }
}
exports.default = PayIdError;
/**
 * Default errors.
 */
PayIdError.unimplemented = new PayIdError(PayIdErrorType.Unimplemented, 'Unimplemented');
PayIdError.invalidPayId = new PayIdError(PayIdErrorType.InvalidPayId, 'Invalid payment pointer');
//# sourceMappingURL=pay-id-error.js.map